#line 2 "input_lexer.cc"

#line 4 "input_lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE giac_yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via giac_yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void giac_yyrestart (FILE *input_file ,yyscan_t yyscanner );
void giac_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE giac_yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void giac_yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void giac_yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void giac_yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void giac_yypop_buffer_state (yyscan_t yyscanner );

static void giac_yyensure_buffer_stack (yyscan_t yyscanner );
static void giac_yy_load_buffer_state (yyscan_t yyscanner );
static void giac_yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER giac_yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE giac_yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE giac_yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE giac_yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *giac_yyalloc (yy_size_t ,yyscan_t yyscanner );
void *giac_yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void giac_yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer giac_yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        giac_yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        giac_yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define giac_yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 377
#define YY_END_OF_BUFFER 378
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1153] =
    {   0,
        0,    0,   23,   23,    0,    0,    0,    0,    0,    0,
      378,  376,    1,    2,  167,    3,  374,  132,  206,  175,
       31,   84,   85,  193,  169,   82,  188,  195,  201,  351,
      351,   34,   32,   80,  130,   81,   29,  143,  372,  372,
      372,  253,  372,  372,  372,  372,   41,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,   86,
       87,  214,   30,   16,  372,  372,  372,  372,  254,  372,
      372,  372,   38,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  102,  154,  103,   39,  372,
      372,  372,  372,  372,   23,   25,   24,  377,  375,  377,

       15,    6,    5,  377,   18,   17,   19,    1,  117,    0,
        0,    0,    0,    0,    0,    0,    0,  133,  207,  373,
       88,   89,    0,   43,   42,  373,  104,  105,  149,  196,
      197,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  216,  194,  170,  171,   83,
      172,  113,  173,  112,  198,  174,  190,  164,  203,  370,
      217,   22,    0,  202,  369,  351,    0,    0,    0,    0,
        0,    0,   36,   35,  136,    0,    0,    0,  110,  124,
      119,  141,  114,  140,  128,  111,  142,  144,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  318,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  269,  328,  372,  372,  372,  372,  159,   48,  372,
      372,   47,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  372,  372,
      372,  372,  372,  243,  372,  372,  372,  372,  372,  319,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  268,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  289,  372,   45,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  155,   33,  177,  178,
      372,   57,   37,   46,  372,  372,  372,  372,   23,   24,
       24,   26,    0,  375,   15,    4,   14,    7,    8,   12,
       13,    9,   11,   10,   18,    0,    0,  361,  362,  360,
      364,  363,  365,  209,   96,   97,   90,   91,  106,  107,
      373,   94,   95,   44,    0,  134,  210,    0,  199,  186,
      191,    0,  204,    0,  125,    0,    0,  131,    0,  127,
        0,  147,    0,  218,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   21,

      369,    0,    0,  371,    0,  367,  366,  368,  352,    0,
        0,    0,    0,  150,  168,  372,  372,  372,  341,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  263,
      332,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      337,  372,  283,  372,  372,  372,  372,  372,  372,  372,
      372,  340,  372,  308,  372,  372,  372,  372,  372,  163,
        0,    0,    0,    0,    0,    0,  274,    0,    0,    0,
        0,    0,    0,  158,    0,    0,    0,    0,    0,    0,
        0,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  262,  372,  372,  372,  372,   52,  372,  372,  279,
      372,  372,  211,  284,  372,  282,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  215,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  160,  372,
       40,  185,  179,  180,  181,  182,  183,  184,  346,  189,
      176,   51,  208,  347,  349,  348,  350,  139,    7,    8,
        0,    0,    0,    0,    0,   98,   99,   92,   93,  108,
      109,  118,  151,  165,  137,  122,  120,  115,  129,  145,
        0,    0,  273,    0,    0,    0,    0,    0,  288,  157,

        0,    0,    0,  156,    0,  370,    0,    0,    0,  369,
        0,  353,    0,   20,    0,    0,    0,  372,  249,  250,
      372,  372,  372,  372,  372,  372,  335,  372,  372,  330,
      338,  264,  372,  372,  372,  372,  372,  271,  278,  331,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      320,  372,  315,  372,  372,  153,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  213,    0,  286,    0,    0,
        0,    0,    0,    0,    0,  161,  372,  372,  372,  372,
      372,  372,  372,  372,  247,  372,  372,  372,    0,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372,  270,  372,  372,   59,  372,  372,  372,  372,
      372,  372,  372,  372,  372,   68,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  306,  372,  307,  372,   60,
       61,  372,  310,  372,  372,  372,  372,  372,  372,  372,
      372,  372,    7,    0,    0,  100,  101,  152,    0,    0,
        0,    0,  212,  285,    0,    0,  162,    0,  369,    0,
        0,  326,  325,  327,  248,  334,  251,  372,  372,  372,
      372,  372,  258,  372,  372,  372,  372,  372,  372,  297,
      336,  322,  372,  372,  372,  372,  344,  372,  324,  317,
      333,    0,    0,    0,    0,    0,    0,    0,  126,    0,

      200,  187,    0,    0,    0,    0,    0,    0,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,    0,
        0,    0,  372,  255,  257,  256,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,   65,   62,  372,  372,
      372,  372,  372,  372,  292,  372,  372,  372,  372,  372,
      372,  295,  372,  372,  372,  372,  372,  372,   77,  372,
      372,  372,  372,  372,  372,   56,  372,  372,  372,  372,
      316,  372,   27,   28,  240,  272,    0,    0,    0,    0,
        0,  372,  226,  339,  220,  372,  222,  372,  372,  372,
      372,  343,  301,  304,  372,  329,  372,  309,    0,    0,

      116,    0,  146,    0,    0,  281,  219,  166,    0,    0,
        0,  313,  372,  372,  372,  237,  241,  244,  372,  372,
      372,   70,  252,  266,  265,    0,  372,  372,  259,  260,
      372,  372,  372,   64,  372,  372,  372,  372,  372,  372,
      232,  372,  291,  372,  372,   69,   72,  372,  372,  372,
      372,  299,  372,  372,  302,  372,  372,  372,  311,  372,
      372,  372,  372,  372,  372,   78,   79,    0,  280,    0,
      312,  354,  372,  372,  372,  221,  223,  372,  323,  372,
      138,  205,    0,    0,    0,  135,    0,    0,  372,  372,
      372,  239,  242,  245,   73,  372,  372,    0,  235,  372,

      372,  290,   75,  372,  372,  372,   67,  372,  287,  372,
      372,  372,  372,  372,  372,  372,  300,  372,  372,  372,
      372,  227,  372,  372,  372,   66,  314,    0,  305,  355,
      372,  321,  224,  372,  372,  148,    0,  123,    0,  121,
      372,  372,  372,  372,  372,  267,  372,  261,  372,  275,
       50,  372,   58,  372,   54,  372,  372,  238,  298,  303,
      372,  372,  372,  296,  372,  372,    0,    0,    0,  342,
      225,  345,    0,  192,  372,  372,  372,  246,  372,  372,
      372,   71,   55,  372,   76,  372,   63,  372,  372,  372,
      372,    0,  358,    0,  277,  372,  372,  372,  372,  372,

      372,  293,  372,  372,  372,  372,  372,  276,    0,  356,
      372,  372,  230,  372,  372,   49,  372,  372,  372,  372,
      372,    0,  357,  372,  229,  233,  372,  372,  372,   74,
       53,  372,  359,  372,  372,  236,  372,  294,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  234,  228,
      231,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   23,   23,   23,   23,   24,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       41,   48,   49,   50,   51,   52,   53,   54,   41,   41,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,

       65,   66,   67,   68,   69,   41,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       84,   41,   85,   86,   87,   41,    1,   88,   89,   90,
       91,   92,   41,   41,   41,   93,   94,   41,   41,   41,
       41,   41,   41,   41,   41,   95,   41,   41,   41,   96,
       41,   41,   41,   97,   41,   41,   41,   98,   41,   99,
      100,  101,   41,  102,  103,  104,  105,   41,   41,   41,
      106,   41,   41,   41,   41,  107,  108,  109,  110,  111,
      112,  113,  114,  115,  116,  117,   41,   41,   41,   41,
      118,   41,   41,  119,  120,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,  121,  122,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,  123,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,    1
    } ;

static yyconst flex_int32_t yy_meta[124] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    4,    4,    1,
        1,    1,    1,    5,    1,    1,    1,    1,    1,    6,
        6,    6,    6,    6,    1,    1,    1,    1,    1,    6,
        1,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    4,    3,    4,    1,    7,    8,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    4,    1,    4,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7
    } ;

static yyconst flex_int16_t yy_base[1170] =
    {   0,
        0,    0,  121,  122,  123,  124,  125,  126,  127,  130,
     1678, 1679,  137, 1679, 1649, 1679,  179, 1679,  162,  130,
      258, 1679, 1679,  120,  127, 1660,  129,  237,  131,  278,
      155,  287, 1679,  124,  133,  135, 1679,  202,  122, 1627,
      134,  248,  101,  123, 1600,  286,  106,    0, 1633,  112,
     1626, 1623,  286,  118,  149,  140, 1638,  167, 1623, 1679,
     1679, 1679,  293, 1679,  232,  167,  130,  165,  302,  205,
     1591, 1606,  163,  223,  319,  271, 1591,  318,  329,  344,
     1597,  255,  181, 1596, 1589, 1679, 1576, 1679,    0,  301,
       67, 1546, 1572,  319,    0, 1679,  332, 1656, 1679, 1679,

        0, 1679, 1652,  405,    0, 1679, 1679,  382, 1679, 1642,
     1639,  385,  260,  428,  477,  400,  495, 1679,  467,    0,
     1679, 1679,  252,    0,    0, 1586, 1679, 1679, 1679, 1679,
     1679, 1626, 1642, 1641, 1641, 1639, 1638, 1637, 1629, 1635,
     1617,  388,  280,  328,  338, 1633,  205,  364,  362, 1569,
      227, 1577, 1568, 1566, 1553, 1679, 1679, 1679, 1679, 1679,
     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679,  420,
     1679, 1679, 1635, 1679,  484,  544,  554,  412,  452,  561,
     1530, 1617, 1679, 1679, 1679, 1555, 1557, 1553, 1679, 1679,
     1679, 1679, 1679, 1679, 1679, 1679,  513, 1679,    0, 1597,

     1553, 1594, 1580, 1583, 1556, 1563,  402, 1587,    0,  525,
     1550, 1575, 1553, 1573, 1543, 1540,  299, 1544, 1548, 1542,
     1554, 1564,    0, 1570, 1541, 1537, 1560,    0, 1566, 1560,
     1527,    0, 1531,  407,  379, 1523, 1566, 1553, 1519, 1522,
     1552, 1559, 1529, 1549,  361, 1527, 1519,  414,  415, 1529,
      530, 1519, 1515,  395, 1530,  283, 1517, 1515, 1517, 1520,
     1511, 1522, 1506,    0, 1520, 1508, 1509, 1503, 1502,    0,
     1514, 1499, 1496,  171, 1504, 1499, 1504, 1492,  473, 1497,
     1499,   86, 1503,  448, 1501, 1488, 1493, 1501, 1497,  446,
     1492,  508, 1488,    0,  473, 1482,  520, 1486, 1482, 1485,

      339, 1495, 1482, 1482, 1482, 1484,  407, 1475, 1489, 1473,
      550, 1484, 1485, 1470, 1477, 1468, 1679,    0,    0,    0,
     1425,    0,    0,    0,  521,  548,  513, 1426,    0,  532,
      586, 1679, 1539, 1679,    0, 1679, 1679,  629,  635, 1679,
     1679, 1679, 1679, 1679,    0, 1526, 1523,  644, 1679, 1679,
      662,  619,  711,  702, 1679, 1679, 1679, 1679, 1679, 1679,
        0, 1679, 1679,    0, 1528, 1679, 1679, 1527, 1679, 1679,
     1679, 1526, 1679, 1525, 1679, 1524, 1523, 1679, 1522, 1679,
     1521, 1679, 1520, 1679, 1466, 1462,  484, 1449, 1454, 1462,
     1446, 1513, 1512, 1443, 1452, 1443, 1508,  743, 1515, 1679,

      651,  771,  668,  680,  781,  482,  697,  789,  716, 1514,
     1443, 1448, 1441,    0,    0, 1481, 1476, 1461,    0, 1439,
     1458, 1458, 1467, 1435, 1436, 1429, 1428, 1456, 1422,    0,
        0, 1426, 1449, 1431, 1425, 1429, 1418, 1421, 1457, 1449,
        0, 1416,    0, 1450, 1451, 1410, 1407, 1450, 1434, 1404,
     1403,    0, 1438, 1422, 1401, 1408, 1429, 1434, 1405,    0,
     1411, 1396, 1392, 1392, 1397, 1405, 1679, 1390,  523, 1395,
     1403, 1395, 1386, 1679, 1384, 1381, 1389, 1385, 1398,  548,
     1382, 1399, 1386, 1379,  690, 1375, 1384, 1390, 1377, 1370,
     1381, 1445, 1379, 1386, 1368, 1371, 1379,  546, 1365, 1373,

     1377,    0, 1360, 1373, 1375, 1372, 1367, 1370, 1355,    0,
     1356, 1352,    0,    0, 1359,    0, 1371, 1352, 1359, 1362,
     1347, 1347, 1369, 1350, 1338,    0, 1359, 1353, 1355, 1353,
      675, 1356, 1337, 1356, 1349, 1348, 1357, 1356, 1345, 1331,
     1343, 1329, 1341, 1336, 1327, 1324, 1335, 1330,    0, 1296,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  760,  794,
     1384, 1383, 1380, 1379,  648, 1679, 1679, 1679, 1679, 1679,
     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
     1384, 1316, 1679, 1328, 1327, 1311, 1379, 1378, 1679, 1679,

     1308, 1313, 1375, 1679,  807,  817,  841,  851,  822,  856,
      868,  873, 1382, 1679, 1321, 1311, 1319, 1339,    0,    0,
     1315, 1341, 1346, 1327, 1302, 1296,    0, 1339, 1325,    0,
        0,    0, 1301, 1296, 1301, 1297, 1301,    0,    0,    0,
     1318, 1330, 1300, 1289, 1331, 1314, 1296, 1283, 1327, 1318,
        0, 1292,    0, 1320, 1290, 1679, 1285, 1284, 1291, 1278,
     1272, 1284, 1272, 1269, 1266, 1679, 1266, 1679, 1266, 1278,
     1275, 1274, 1261, 1263, 1264, 1679, 1258, 1271, 1261, 1260,
     1264, 1271, 1259, 1254,    0, 1258, 1263, 1246,  687, 1255,
     1254, 1259, 1246, 1245, 1248, 1243, 1240, 1247, 1252, 1241,

     1244, 1235,    0, 1240, 1257, 1256, 1241, 1231, 1247, 1233,
     1245, 1231, 1238, 1237, 1243, 1679, 1222,  597, 1239, 1234,
      712,  322, 1218, 1220, 1241,    0, 1229,    0, 1221, 1679,
     1679, 1232, 1218, 1230, 1212, 1223, 1221, 1228, 1212, 1205,
     1219, 1164,  878,  706,  614, 1679, 1679, 1679, 1271, 1270,
     1203, 1201, 1679, 1679, 1201, 1204, 1679,  883,  888,  898,
     1188, 1679, 1679, 1679,    0,    0,    0, 1232, 1225, 1206,
     1194, 1197,    0, 1205, 1198, 1189, 1206, 1186, 1215,    0,
        0,    0, 1214, 1218, 1184, 1188, 1217, 1214,    0,    0,
        0, 1191, 1193, 1185, 1192, 1175, 1176, 1172, 1679, 1173,

     1679, 1679, 1173, 1184, 1183, 1170, 1166, 1172, 1167, 1184,
     1159, 1163, 1167, 1166, 1173, 1157, 1160, 1162, 1132, 1108,
     1115, 1099, 1091,    0,    0,    0, 1101, 1093, 1073, 1074,
     1045, 1038, 1059, 1044, 1038, 1042, 1679, 1679, 1027, 1050,
     1037, 1034, 1027, 1032,    0, 1024, 1034, 1047, 1046, 1036,
     1040,    0, 1024, 1032, 1017, 1030, 1017, 1020, 1679, 1012,
     1012, 1026, 1014, 1024, 1018,    0, 1013, 1011, 1007, 1012,
        0,  578, 1067, 1064, 1679, 1679, 1002, 1068, 1005, 1066,
      967, 1035,    0,    0,    0,  992,    0, 1008,  994,  992,
      146,    0,    0,    0,  155,    0,  231,    0,  217,  309,

     1679,  385, 1679,  392,  487, 1679, 1679, 1679,  482,  509,
      511, 1679,  510,  529,  549,  576,  579,  625,  667,  655,
      658, 1679,    0, 1679, 1679,  668,  677,  685,    0,    0,
      685,  696,  715, 1679,  698,  701,  718,  744,  731,  740,
        0,  745,    0,  747,  759, 1679, 1679,  756,  769,  758,
      782,    0,  771,  776,    0,  784,  790,  782,    0,  789,
      802,  805,  806,  827,  819,    0,    0,  821, 1679,  903,
     1679,  903,  868,  855,  846,    0,    0,  863,    0,  882,
     1679, 1679,  853,  868,  863, 1679,  872,  865,  870,  877,
      867,    0,    0,    0, 1679,  861,  882,  879,    0,  882,

      882,    0, 1679,  880,  868,  863, 1679,  875,    0,  872,
      887,  885,  887,  878,  882,  891,    0,  891,  894,  892,
      891,    0,  887,  897,  897, 1679,    0,  900, 1679,  946,
      915,    0,    0,  906,  922, 1679,  910, 1679,  895, 1679,
      916,  912,  903,  913,  907, 1679,  908,    0,  926,    0,
        0,  916,    0,  961,    0,  929,  907,    0,    0,    0,
      931,  918,  924,    0,  931,  914,  913,  977,  905,    0,
        0,    0,  915, 1679,  917,  933,  939,    0,  930,  944,
      934, 1679,    0,  943, 1679,  939, 1679,  946,  945,  942,
      951, 1002,  994,  909, 1679,  946,  960,  957,  959,  947,

      964,    0,  955,  968,  949,  956,  951, 1679,  943, 1012,
      966,  965,    0,  974,  971,    0,  967,  976,  988,  978,
      971,  936, 1027,  972,    0,    0,  992,  981,  981, 1679,
        0,  979, 1679,  978,  996,    0,  982,    0,  991,  990,
      990,  989,  999, 1004,  993,  989,  989,  992,    0,    0,
        0, 1679, 1117, 1125, 1133, 1141, 1146, 1148, 1155, 1163,
     1171, 1179, 1187, 1195, 1197, 1204, 1212, 1220, 1228
    } ;

static yyconst flex_int16_t yy_def[1170] =
    {   0,
     1152,    1, 1153, 1153, 1154, 1154, 1155, 1155, 1156, 1156,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1157, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1152,
     1152, 1152, 1152, 1152, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1152, 1152, 1152, 1158, 1158,
     1158, 1158, 1158, 1158, 1159, 1152, 1160, 1161, 1152, 1152,

     1162, 1152, 1152, 1163, 1164, 1152, 1152, 1152, 1152, 1152,
     1152,   17,  112, 1152, 1152, 1152, 1152, 1152, 1152, 1165,
     1152, 1152, 1152, 1165, 1165, 1165, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1166, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1158, 1158,

     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,

     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1152, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1159, 1160,
     1160, 1152, 1161, 1152, 1162, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1164, 1167, 1168, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1165, 1152, 1152, 1165, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1166, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1169,
     1152, 1152, 1152, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,

     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1152, 1152,
     1167, 1167, 1168, 1168, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1169, 1152, 1152, 1152, 1152, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1152, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,

     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1152, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1152,
     1152, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1152, 1167, 1168, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1152,
     1152, 1152, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1152, 1152, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1152, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1167, 1168, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1152, 1158, 1152, 1152, 1152, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1152, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1152, 1152, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1152, 1152, 1152,
     1152, 1152, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1158, 1158,
     1158, 1158, 1158, 1158, 1152, 1158, 1158, 1152, 1158, 1158,

     1158, 1158, 1152, 1158, 1158, 1158, 1152, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1152, 1158, 1152, 1152, 1152,
     1158, 1158, 1158, 1158, 1158, 1152, 1152, 1152, 1152, 1152,
     1158, 1158, 1158, 1158, 1158, 1152, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1152, 1152, 1152, 1158,
     1158, 1158, 1152, 1152, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1152, 1158, 1158, 1152, 1158, 1152, 1158, 1158, 1158,
     1158, 1152, 1152, 1152, 1152, 1158, 1158, 1158, 1158, 1158,

     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1152, 1152, 1152,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1152, 1152, 1158, 1158, 1158, 1158, 1158, 1158, 1152,
     1158, 1158, 1152, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158,    0, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152
    } ;

static yyconst flex_int16_t yy_nxt[1803] =
    {   0,
       12,   13,   14,   13,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   31,   31,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   48,   51,   52,   53,   54,   55,   56,
       48,   57,   58,   59,   60,   13,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   48,
       74,   75,   76,   77,   78,   48,   79,   80,   81,   82,
       83,   84,   85,   48,   86,   87,   88,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   89,

       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   90,   91,
       92,   93,   94,   96,   96,   99,   99,  102,  102,  106,
      103,  103,  106,  156,   97,   97,  100,  100,  108,  129,
      108,  158,  222,  130,  172,  161,  505,  157,  212,  173,
      189,  190,  191,  234,  159,  162,  163,  164,  174,  192,
      193,  194,  195,  196,  506,  203,  200,  321,  214,  118,
      119,  223,  175,  225,  176,  176,  176,  176,  176,  204,
      104,  104,  235,  213,  322,  226,  107,  131,  237,  107,
      177,  236,  108,  110,  201,  111,  215,  238,  112,  112,

      113,  113,  114,  267,  239,  242,  978,  205,  240,  268,
      114,  114,  114,  114,  114,  114,  121,  206,  122,  177,
      123,  197,  197,  197,  197,  197,  124,  265,  282,  269,
      125,  495,  198,  979,  243,  283,  126,  266,  270,  114,
      115,  114,  114,  114,  114,  313,  127,  496,  128,  314,
      165,  166,  116,  167,  168,  169,  170,  170,  170,  170,
      170,  117,  132,  362,  363,  133,  134,  135,  277,  278,
      980,  136,  137,  181,  138,  139,  140,  385,  279,  113,
      113,  386,  141,  207,  142,  143,  144,  208,  145,  981,
      378,  284,  392,  209,  171,  175,  285,  176,  176,  176,

      176,  176,  259,  393,  260,  182,  261,  379,  262,  263,
      264,  183,  184,  177,  185,  146,  210,  217,  147,  218,
      219,  114,  220,  186,  211,  229,  148,  311,  221,  149,
      150,  151,  312,  187,  152,  289,  230,  153,  380,  178,
      154,  433,  177,  155,  290,  331,  231,  478,  382,  291,
      332,  179,  188,  245,  232,  381,  246,  247,  248,  233,
      180,  249,  479,  250,  251,  252,  253,  254,  383,  255,
      256,  434,  257,  982,  271,  258,  272,  273,  274,  286,
      293,  275,  855,  108,  276,  108,  294,  287,  295,  300,
      296,  297,  288,  301,  298,  302,  181,  299,  375, 1152,

      856, 1152,  303,  304,  305,  318,  306,  325,  307,  319,
      320,  326,  327,  530,  328,  376,  377,  531,  308,  352,
      352,  352,  352,  309,  338,  338,  338,  338,  339,  387,
      389,  406,  406,  461,  421,  390,  388,  108,  462,  170,
      170,  170,  170,  170,  422,  983,  348,  114,  114,  114,
      114,  114,  349,  448,  450,  398,  449,  451,  350,  114,
      114,  114,  114,  114,  114,  475,  340, 1152,  476,  984,
      341,  407,  407,  407,  407,  354,  465,  342,  355,  356,
      467,  343,  537,  344,  398,  538,  466,  468,  114,  114,
      114,  114,  114,  114,  593,  349,  351,  351,  114,  114,

      114,  406,  406,  401,  401,  401,  401,  401,  114,  114,
      114,  114,  114,  114,  353,  353,  353,  353,  353,  402,
      508,  357,  515,  358,  516,  509,  353,  353,  353,  353,
      353,  353,  197,  197,  197,  197,  197,  114,  114,  114,
      114,  114,  114,  501,  349, 1152,  521,  985,  402,  502,
     1152,  359,  522,  360,  986,  353,  353,  353,  353,  353,
      353,  175,  594,  176,  176,  176,  176,  176,  403,  987,
      403,  988,  518,  404,  404,  404,  404,  404,  989,  177,
      408,  408,  408,  408,  408,  424,  519,  663,  524,  405,
      525,  425,  408,  408,  408,  408,  408,  408,  470,  331,

      664,  526,  426,  471,  332,  990,  695,  991,  177,  472,
      542,  565,  674,  543,  566,  567,  675,  849,  405,  696,
      874,  408,  408,  408,  408,  408,  408,  544,  551,  552,
      745,  553,  554,  555,  556,  557,  558,  559,  352,  352,
      352,  352,  560,  992,  561,  562,  993,  563,  569,  569,
      569,  569,  570,  564,  570,  570,  570,  570,  570,  746,
      747,  850,  181,  114,  114,  114,  114,  114,  966,  967,
      401,  401,  401,  401,  401,  114,  114,  114,  114,  114,
      114,  351,  351,  114,  114,  114,  608,  404,  404,  404,
      404,  404,  994,  114,  114,  114,  114,  114,  114,  404,

      404,  404,  404,  404,  114,  114,  114,  114,  114,  114,
      575,  349,  873,  576,  577,  608,  407,  407,  407,  407,
      744,  995,  114,  114,  114,  114,  114,  114,  996,  349,
      353,  353,  353,  353,  353,  612,  612,  612,  612,  612,
      997,  998,  353,  353,  353,  353,  353,  353,  723,  999,
      820, 1000,  680, 1001,  724,  821,  578,  605,  579,  605,
     1002,  822,  606,  606,  606,  606,  606,  681,  682, 1003,
     1004,  353,  353,  353,  353,  353,  353, 1005,  607,  743,
      743,  743,  743,  570,  853,  609,  580,  609,  581,  854,
      610,  610,  610,  610,  610,  403, 1006,  403, 1007, 1008,

      404,  404,  404,  404,  404, 1009,  611,  607,  408,  408,
      408,  408,  408,  570,  570,  570,  570,  570, 1010, 1011,
      408,  408,  408,  408,  408,  408,  606,  606,  606,  606,
      606, 1012, 1013, 1014, 1015,  611,  606,  606,  606,  606,
      606,  610,  610,  610,  610,  610, 1016, 1017, 1018,  408,
      408,  408,  408,  408,  408,  605, 1019,  605, 1020, 1021,
      606,  606,  606,  606,  606,  758, 1022,  758, 1023, 1024,
      759,  759,  759,  759,  759,  610,  610,  610,  610,  610,
     1025, 1026,  609, 1027,  609, 1028,  760,  610,  610,  610,
      610,  610,  612,  612,  612,  612,  612,  570,  570,  570,

      570,  570,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  758, 1029,  758,  760, 1031,  759,  759,  759,
      759,  759, 1030, 1030, 1030, 1030, 1030, 1032, 1033, 1034,
     1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
     1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
     1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
     1065, 1066, 1067, 1068, 1070, 1030, 1030, 1030, 1030, 1030,
     1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1081,
     1082, 1083, 1084, 1085, 1086, 1087, 1088, 1080, 1089, 1090,
     1091, 1092, 1094, 1095, 1096,  761, 1093, 1093, 1093, 1093,

     1093, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
     1106, 1107, 1108, 1093, 1093, 1093, 1093, 1093, 1110, 1111,
     1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
     1122, 1123, 1123, 1123, 1123, 1123, 1124, 1125, 1126, 1127,
     1128, 1129, 1130, 1131, 1132, 1133, 1123, 1123, 1123, 1123,
     1123, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
     1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1069, 1151,
      977,  976,  975,  974,  973,  972,  971,  970,  969,  968,
      574,  572,  965,  964,  963,  962,  961,  960,  959,  958,
      957,  956,  955,  954,  953,  952,  951,  950,  949,  948,

      947,  946,  945,  944,  943,  942,  941,  940,  939,  938,
      937,  936,  935,  934,  933,  932, 1109,   95,   95,   95,
       95,   95,   95,   95,   95,   98,   98,   98,   98,   98,
       98,   98,   98,  101,  101,  101,  101,  101,  101,  101,
      101,  105,  105,  105,  105,  105,  105,  105,  105,  120,
      931,  930,  120,  199,  199,  329,  929,  329,  329,  928,
      329,  329,  329,  330,  927,  330,  330,  330,  330,  330,
      330,  333,  333,  333,  333,  926,  333,  333,  333,  335,
      925,  924,  335,  335,  335,  335,  335,  337,  337,  337,
      337,  337,  337,  337,  337,  345,  923,  345,  345,  345,

      345,  345,  361,  361,  399,  399,  399,  399,  399,  399,
      399,  399,  571,  571,  571,  571,  922,  571,  571,  571,
      573,  573,  573,  573,  921,  573,  573,  573,  613,  613,
      613,  613,  613,  613,  613,  613,  920,  919,  918,  917,
      916,  915,  914,  913,  912,  911,  910,  909,  908,  907,
      906,  905,  904,  903,  902,  901,  900,  899,  898,  897,
      896,  895,  894,  893,  892,  891,  890,  889,  888,  887,
      886,  885,  884,  883,  882,  881,  880,  879,  878,  877,
      876,  875,  872,  871,  870,  869,  868,  867,  866,  865,
      864,  863,  862,  861,  860,  859,  858,  857,  852,  851,

      848,  847,  846,  845,  844,  843,  842,  841,  840,  839,
      838,  837,  836,  835,  834,  833,  832,  831,  830,  829,
      828,  827,  826,  825,  824,  823,  819,  818,  817,  816,
      815,  814,  813,  812,  811,  810,  809,  808,  807,  806,
      805,  804,  803,  802,  801,  800,  799,  798,  797,  796,
      795,  794,  793,  792,  791,  790,  789,  788,  787,  786,
      785,  784,  783,  782,  781,  780,  779,  778,  777,  776,
      775,  774,  773,  772,  771,  770,  769,  768,  767,  766,
      765,  764,  763,  762,  614,  757,  756,  755,  754,  753,
      752,  751,  750,  749,  748,  745,  574,  744,  572,  742,

      741,  740,  739,  738,  737,  736,  735,  734,  733,  732,
      731,  730,  729,  728,  727,  726,  725,  722,  721,  720,
      719,  718,  717,  716,  715,  714,  713,  712,  711,  710,
      709,  708,  707,  706,  705,  704,  703,  702,  701,  700,
      699,  698,  697,  694,  693,  692,  691,  690,  689,  688,
      687,  686,  685,  684,  683,  679,  678,  677,  676,  673,
      672,  671,  670,  669,  668,  667,  666,  665,  662,  661,
      660,  659,  658,  657,  656,  655,  654,  653,  652,  651,
      650,  649,  648,  647,  646,  645,  644,  643,  642,  641,
      640,  639,  638,  637,  636,  635,  634,  633,  632,  631,

      630,  629,  628,  627,  626,  625,  624,  623,  622,  621,
      620,  619,  618,  617,  616,  615,  614,  400,  604,  603,
      602,  601,  600,  599,  598,  597,  596,  595,  592,  591,
      590,  589,  588,  587,  586,  585,  584,  583,  582,  574,
      572,  334,  568,  550,  549,  548,  547,  546,  545,  541,
      540,  539,  536,  535,  534,  533,  532,  529,  528,  527,
      523,  520,  517,  514,  513,  512,  511,  510,  507,  504,
      503,  500,  499,  498,  497,  494,  493,  492,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  482,  481,  480,
      477,  474,  473,  469,  464,  463,  460,  459,  458,  457,

      456,  455,  454,  453,  452,  447,  446,  445,  444,  443,
      442,  441,  440,  439,  438,  437,  436,  435,  432,  431,
      430,  429,  428,  427,  423,  420,  419,  418,  417,  416,
      415,  414,  413,  412,  411,  410,  409,  400,  397,  396,
      395,  394,  391,  384,  374,  373,  372,  371,  370,  369,
      368,  367,  366,  365,  364,  347,  346,  336,  334,  324,
      323,  317,  316,  315,  310,  292,  281,  280,  244,  241,
      228,  227,  224,  216,  202,  160,  109, 1152,   11, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152
    } ;

static yyconst flex_int16_t yy_chk[1803] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    4,    5,    6,    7,    8,    9,
        7,    8,   10,   24,    3,    4,    5,    6,   13,   20,
       13,   25,   47,   20,   29,   27,  282,   24,   43,   29,
       34,   34,   34,   54,   25,   27,   27,   27,   29,   35,
       35,   35,   36,   36,  282,   41,   39,   91,   44,   19,
       19,   47,   31,   50,   31,   31,   31,   31,   31,   41,
        7,    8,   54,   43,   91,   50,    9,   20,   55,   10,
       31,   54,   13,   17,   39,   17,   44,   55,   17,   17,

       17,   17,   17,   67,   56,   58,  891,   41,   56,   67,
       17,   17,   17,   17,   17,   17,   19,   41,   19,   31,
       19,   38,   38,   38,   38,   38,   19,   66,   73,   68,
       19,  274,   38,  895,   58,   73,   19,   66,   68,   17,
       17,   17,   17,   17,   17,   83,   19,  274,   19,   83,
       28,   28,   17,   28,   28,   28,   28,   28,   28,   28,
       28,   17,   21,  123,  123,   21,   21,   21,   70,   70,
      897,   21,   21,   31,   21,   21,   21,  147,   70,  113,
      113,  147,   21,   42,   21,   21,   21,   42,   21,  899,
      143,   74,  151,   42,   28,   30,   74,   30,   30,   30,

       30,   30,   65,  151,   65,   32,   65,  143,   65,   65,
       65,   32,   32,   30,   32,   21,   42,   46,   21,   46,
       46,  113,   46,   32,   42,   53,   21,   82,   46,   21,
       21,   21,   82,   32,   21,   76,   53,   21,  144,   30,
       21,  217,   30,   21,   76,   97,   53,  256,  145,   76,
       97,   30,   32,   63,   53,  144,   63,   63,   63,   53,
       30,   63,  256,   63,   63,   63,   63,   63,  145,   63,
       63,  217,   63,  900,   69,   63,   69,   69,   69,   75,
       78,   69,  722,  108,   69,  108,   78,   75,   78,   79,
       78,   78,   75,   79,   78,   79,   30,   78,  142,  112,

      722,  112,   79,   79,   80,   90,   80,   94,   80,   90,
       90,   94,   94,  301,   94,  142,  142,  301,   80,  116,
      116,  116,  116,   80,  104,  104,  104,  104,  104,  148,
      149,  178,  178,  245,  207,  149,  148,  108,  245,  170,
      170,  170,  170,  170,  207,  902,  112,  114,  114,  114,
      114,  114,  112,  234,  235,  170,  234,  235,  112,  114,
      114,  114,  114,  114,  114,  254,  104,  112,  254,  904,
      104,  179,  179,  179,  179,  119,  248,  104,  119,  119,
      249,  104,  307,  104,  170,  307,  248,  249,  114,  114,
      114,  114,  114,  114,  387,  114,  115,  115,  115,  115,

      115,  406,  406,  175,  175,  175,  175,  175,  115,  115,
      115,  115,  115,  115,  117,  117,  117,  117,  117,  175,
      284,  119,  290,  119,  290,  284,  117,  117,  117,  117,
      117,  117,  197,  197,  197,  197,  197,  115,  115,  115,
      115,  115,  115,  279,  115,  330,  295,  905,  175,  279,
      330,  119,  295,  119,  909,  117,  117,  117,  117,  117,
      117,  176,  387,  176,  176,  176,  176,  176,  177,  910,
      177,  911,  292,  177,  177,  177,  177,  177,  913,  176,
      180,  180,  180,  180,  180,  210,  292,  469,  297,  177,
      297,  210,  180,  180,  180,  180,  180,  180,  251,  331,

      469,  297,  210,  251,  331,  914,  498,  915,  176,  251,
      311,  327,  480,  311,  327,  327,  480,  718,  177,  498,
      745,  180,  180,  180,  180,  180,  180,  311,  325,  325,
      745,  325,  325,  325,  325,  325,  325,  326,  352,  352,
      352,  352,  326,  916,  326,  326,  917,  326,  338,  338,
      338,  338,  338,  326,  339,  339,  339,  339,  339,  575,
      575,  718,  176,  348,  348,  348,  348,  348,  872,  872,
      401,  401,  401,  401,  401,  348,  348,  348,  348,  348,
      348,  351,  351,  351,  351,  351,  401,  403,  403,  403,
      403,  403,  918,  351,  351,  351,  351,  351,  351,  404,

      404,  404,  404,  404,  348,  348,  348,  348,  348,  348,
      354,  348,  744,  354,  354,  401,  407,  407,  407,  407,
      744,  919,  351,  351,  351,  351,  351,  351,  920,  351,
      353,  353,  353,  353,  353,  409,  409,  409,  409,  409,
      921,  926,  353,  353,  353,  353,  353,  353,  531,  927,
      689,  928,  485,  931,  531,  689,  354,  398,  354,  398,
      932,  689,  398,  398,  398,  398,  398,  485,  485,  933,
      935,  353,  353,  353,  353,  353,  353,  936,  398,  569,
      569,  569,  569,  569,  721,  402,  354,  402,  354,  721,
      402,  402,  402,  402,  402,  405,  937,  405,  938,  939,

      405,  405,  405,  405,  405,  940,  402,  398,  408,  408,
      408,  408,  408,  570,  570,  570,  570,  570,  942,  944,
      408,  408,  408,  408,  408,  408,  605,  605,  605,  605,
      605,  945,  948,  949,  950,  402,  606,  606,  606,  606,
      606,  609,  609,  609,  609,  609,  951,  953,  954,  408,
      408,  408,  408,  408,  408,  607,  956,  607,  957,  958,
      607,  607,  607,  607,  607,  608,  960,  608,  961,  962,
      608,  608,  608,  608,  608,  610,  610,  610,  610,  610,
      963,  964,  611,  965,  611,  968,  608,  611,  611,  611,
      611,  611,  612,  612,  612,  612,  612,  743,  743,  743,

      743,  743,  758,  758,  758,  758,  758,  759,  759,  759,
      759,  759,  760,  970,  760,  608,  973,  760,  760,  760,
      760,  760,  972,  972,  972,  972,  972,  974,  975,  978,
      980,  983,  984,  985,  987,  988,  989,  990,  991,  996,
      997,  998, 1000, 1001, 1004, 1005, 1006, 1008, 1010, 1011,
     1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1023,
     1024, 1025, 1028, 1030, 1031, 1030, 1030, 1030, 1030, 1030,
     1034, 1035, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1047,
     1049, 1052, 1054, 1056, 1057, 1061, 1062, 1045, 1063, 1065,
     1066, 1067, 1069, 1073, 1075,  612, 1068, 1068, 1068, 1068,

     1068, 1076, 1077, 1079, 1080, 1081, 1084, 1086, 1088, 1089,
     1090, 1091, 1092, 1093, 1093, 1093, 1093, 1093, 1094, 1096,
     1097, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1106, 1107,
     1109, 1110, 1110, 1110, 1110, 1110, 1111, 1112, 1114, 1115,
     1117, 1118, 1119, 1120, 1121, 1122, 1123, 1123, 1123, 1123,
     1123, 1124, 1127, 1128, 1129, 1132, 1134, 1135, 1137, 1139,
     1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1030, 1148,
      890,  889,  888,  886,  882,  881,  880,  879,  878,  877,
      874,  873,  870,  869,  868,  867,  865,  864,  863,  862,
      861,  860,  858,  857,  856,  855,  854,  853,  851,  850,

      849,  848,  847,  846,  844,  843,  842,  841,  840,  839,
      836,  835,  834,  833,  832,  831, 1093, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1157,
      830,  829, 1157, 1158, 1158, 1159,  828, 1159, 1159,  827,
     1159, 1159, 1159, 1160,  823, 1160, 1160, 1160, 1160, 1160,
     1160, 1161, 1161, 1161, 1161,  822, 1161, 1161, 1161, 1162,
      821,  820, 1162, 1162, 1162, 1162, 1162, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1164,  819, 1164, 1164, 1164,

     1164, 1164, 1165, 1165, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1167, 1167, 1167, 1167,  818, 1167, 1167, 1167,
     1168, 1168, 1168, 1168,  817, 1168, 1168, 1168, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169,  816,  815,  814,  813,
      812,  811,  810,  809,  808,  807,  806,  805,  804,  803,
      800,  798,  797,  796,  795,  794,  793,  792,  788,  787,
      786,  785,  784,  783,  779,  778,  777,  776,  775,  774,
      772,  771,  770,  769,  768,  761,  756,  755,  752,  751,
      750,  749,  742,  741,  740,  739,  738,  737,  736,  735,
      734,  733,  732,  729,  727,  725,  724,  723,  720,  719,

      717,  715,  714,  713,  712,  711,  710,  709,  708,  707,
      706,  705,  704,  702,  701,  700,  699,  698,  697,  696,
      695,  694,  693,  692,  691,  690,  688,  687,  686,  684,
      683,  682,  681,  680,  679,  678,  677,  675,  674,  673,
      672,  671,  670,  669,  667,  665,  664,  663,  662,  661,
      660,  659,  658,  657,  655,  654,  652,  650,  649,  648,
      647,  646,  645,  644,  643,  642,  641,  637,  636,  635,
      634,  633,  629,  628,  626,  625,  624,  623,  622,  621,
      618,  617,  616,  615,  613,  603,  602,  601,  598,  597,
      596,  595,  594,  592,  591,  574,  573,  572,  571,  550,

      548,  547,  546,  545,  544,  543,  542,  541,  540,  539,
      538,  537,  536,  535,  534,  533,  532,  530,  529,  528,
      527,  525,  524,  523,  522,  521,  520,  519,  518,  517,
      515,  512,  511,  509,  508,  507,  506,  505,  504,  503,
      501,  500,  499,  497,  496,  495,  494,  493,  492,  491,
      490,  489,  488,  487,  486,  484,  483,  482,  481,  479,
      478,  477,  476,  475,  473,  472,  471,  470,  468,  466,
      465,  464,  463,  462,  461,  459,  458,  457,  456,  455,
      454,  453,  451,  450,  449,  448,  447,  446,  445,  444,
      442,  440,  439,  438,  437,  436,  435,  434,  433,  432,

      429,  428,  427,  426,  425,  424,  423,  422,  421,  420,
      418,  417,  416,  413,  412,  411,  410,  399,  397,  396,
      395,  394,  393,  392,  391,  390,  389,  388,  386,  385,
      383,  381,  379,  377,  376,  374,  372,  368,  365,  347,
      346,  333,  328,  321,  316,  315,  314,  313,  312,  310,
      309,  308,  306,  305,  304,  303,  302,  300,  299,  298,
      296,  293,  291,  289,  288,  287,  286,  285,  283,  281,
      280,  278,  277,  276,  275,  273,  272,  271,  269,  268,
      267,  266,  265,  263,  262,  261,  260,  259,  258,  257,
      255,  253,  252,  250,  247,  246,  244,  243,  242,  241,

      240,  239,  238,  237,  236,  233,  231,  230,  229,  227,
      226,  225,  224,  222,  221,  220,  219,  218,  216,  215,
      214,  213,  212,  211,  208,  206,  205,  204,  203,  202,
      201,  200,  188,  187,  186,  182,  181,  173,  155,  154,
      153,  152,  150,  146,  141,  140,  139,  138,  137,  136,
      135,  134,  133,  132,  126,  111,  110,  103,   98,   93,
       92,   87,   85,   84,   81,   77,   72,   71,   59,   57,
       52,   51,   49,   45,   40,   26,   15,   11, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "input_lexer.ll"
/* -*- mode: C++; compile-command: "flex input_lexer.ll && make input_lexer.o " -*- */
/** @file input_lexer.ll
 *
 *  Lexical analyzer definition for reading expressions.
 *  Note Maple input should be processed replacing # with // and { } for set
 *  This file must be processed with flex. */
/*
 *  Copyright (C) 2001,10 B. Parisse, Institut Fourier, 38402 St Martin d'Heres
 *  The very first version was inspired by GiNaC lexer
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
/*
 * The lexer will first check for static patterns and strings (defined below)
 * If a match is not found, it calls find_or_make_symbol
 * This function looks first if the string should be translated
 * (e.g. add a prefix from the export table)
 * then look in lexer_functions for a match, then look in sym_tab
 * if not found in sym_tab, a new identificateur is created & added in sym_tab
 * Functions in lexer_functions are added during the construction
 * of the corresponding unary_functions using lexer_functions_register
 */
/*
 *  Definitions
 */
#line 45 "input_lexer.ll"
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include "first.h"
#include <iostream>
#include <stdexcept>

#include "gen.h"
#include "input_lexer.h"
#include "help.h"
#include "identificateur.h"
#include "usual.h"
#include "derive.h"
#include "series.h"
#include "intg.h"
#include "sym2poly.h"
#include "moyal.h"
#include "subst.h"
#include "vecteur.h"
#include "modpoly.h"
#include "lin.h"
#include "solve.h"
#include "ifactor.h"
#include "alg_ext.h"
#include "gauss.h"
#include "isom.h"
#include "plot.h"
#include "prog.h"
#include "rpn.h"
#include "ezgcd.h"
#include "tex.h"
#include "risch.h"
#include "input_parser.h"    

#ifdef RTOS_THREADX
  int isatty (int ){ return 0; }
#endif

  using namespace std;
  using namespace giac;
  void giac_yyset_column (int  column_no , yyscan_t yyscanner);
  int giac_yyget_column (yyscan_t yyscanner);
#define YY_USER_ACTION giac_yyset_column(giac_yyget_column(yyscanner)+yyleng,yyscanner);
#define YY_USER_INIT giac_yyset_column(1,yyscanner);

#ifndef NO_NAMESPACE_GIAC
  namespace giac {
#endif // ndef NO_NAMESPACE_GIAC

    const char invalid_name[]="Invalid name";
    void increment_lexer_line_number_setcol(yyscan_t yyscanner,GIAC_CONTEXT){
      giac_yyset_column(1,yyscanner);
      increment_lexer_line_number(contextptr);
    }
    bool doing_insmod = false;

    sym_tab & syms(){
      static sym_tab * ans=new sym_tab;
      return * ans;
    }

    bool builtin_lexer_functions_sorted = false;

    map_charptr_gen & lexer_functions(){
      static map_charptr_gen * ans=0;
      if (!ans){
	ans = new map_charptr_gen;
	doing_insmod=false;
	builtin_lexer_functions_sorted=false;
      }
      return * ans;
    }


#ifdef STATIC_BUILTIN_LEXER_FUNCTIONS
    // gen alias for static initialization on 32 bits processor
    struct charptr_gen_unary {
      const char * s;
      unsigned char type;  // see dispatch.h
      signed char subtype;
      unsigned short reserved; 
      unsigned long _FUNC_; // unary_function_ptr *
    };

    const charptr_gen_unary builtin_lexer_functions[] ={
#ifdef GIAC_HAS_STO_38
#include "static_lexer_38.h"
#else
#include "static_lexer.h"
#endif
    };

    // Array added because GH compiler stores builtin_lexer_functions in RAM
    const unsigned long builtin_lexer_functions_[]={
#ifdef GIAC_HAS_STO_38
#include "static_lexer_38_.h"
#else
#include "static_lexer_.h"
#endif
    };

    const unsigned builtin_lexer_functions_number=sizeof(builtin_lexer_functions)/sizeof(charptr_gen_unary);

    charptr_gen * builtin_lexer_functions_begin(){
      return (charptr_gen *) builtin_lexer_functions;
    }

    charptr_gen * builtin_lexer_functions_end(){
      return builtin_lexer_functions_begin()+builtin_lexer_functions_number;
    }

#else
    unsigned builtin_lexer_functions_number;
    charptr_gen * builtin_lexer_functions(){
      static charptr_gen * ans=0;
      if (!ans){
	ans = new charptr_gen[1300];
	builtin_lexer_functions_number=0;
      }
      return ans;
    }

    charptr_gen * builtin_lexer_functions_begin(){
      return builtin_lexer_functions();
    }

    charptr_gen * builtin_lexer_functions_end(){
      return builtin_lexer_functions()+builtin_lexer_functions_number;
    }

    const unsigned long * const builtin_lexer_functions_=0;
    
#endif

    std::vector<int> & lexer_localization_vector(){
      static std::vector<int> * ans=new  std::vector<int>;
      return *ans;
    }

    std::map<std::string,std::string> & lexer_localization_map(){
      static std::map<std::string,std::string> * ans = new std::map<std::string,std::string>;
      return * ans;
    }
    std::multimap<std::string,giac::localized_string> & back_lexer_localization_map(){
      static std::multimap<std::string,giac::localized_string> * ans= new std::multimap<std::string,giac::localized_string>;
      return * ans;
    }

    // lexer_localization_vector() is the list of languages currently translated
    // lexer_localization_map translates keywords from the locale to giac 
    // back_lexer_localization_map() lists for a giac keyword the translations

    std::map<std::string,std::vector<std::string> > & lexer_translator (){
      static std::map<std::string,std::vector<std::string> > * ans = new std::map<std::string,std::vector<std::string> >;
      return * ans;
    }
    // lexer_translator will be updated when export/with is called
    // To each string (w/o ::) in a given library, 
    // If it exists, we push_back the full string (with ::)
    // If not we create a vector with the full string
    // If a library is unexported we remove the corresponding entry in the 
    // vector and remove the entry if the vector is empty
    std::map<std::string,std::vector<std::string> > & library_functions (){
      static std::map<std::string,std::vector<std::string> > * ans=new std::map<std::string,std::vector<std::string> >;
      return *ans;
    }

    // First string is the library name, second is the vector of function names
    // User defined relations
    vector<user_function> & registered_lexer_functions(){
      static vector<user_function> * ans = 0;
      if (!ans){
	ans = new vector<user_function>;
	// ans->reserve(50);
      }
      return * ans;
    }

    /* integer values */
    struct lexer_tab_int_type {
      const char * keyword;
      unsigned char status;
      int value;
      signed char subtype;
      short int return_value;
    };

    bool tri1(const lexer_tab_int_type & a,const lexer_tab_int_type & b){
      int res= strcmp(a.keyword,b.keyword);
      return res<0;
    }

    bool tri2(const char * a,const char * b){
      return strcmp(a,b)<0;
    }

    const lexer_tab_int_type lexer_tab_int_values []={
#ifdef GIAC_HAS_STO_38
#include "lexer_tab38_int.h"
#else
#include "lexer_tab_int.h"
#endif
    };

    const lexer_tab_int_type * const lexer_tab_int_values_begin = lexer_tab_int_values;
    const unsigned lexer_tab_int_values_n=sizeof(lexer_tab_int_values)/sizeof(lexer_tab_int_type);
    const lexer_tab_int_type * const lexer_tab_int_values_end = lexer_tab_int_values+lexer_tab_int_values_n;
#ifndef NO_NAMESPACE_GIAC
  } // namespace giac
#endif // ndef NO_NAMESPACE_GIAC

/* Abbreviations */
/* If changed, modify isalphan in help.cc FIXME is . allowed inside alphanumeric ? answer NO */




/*
 *  Lexical rules
 */
#line 1479 "input_lexer.cc"

#define INITIAL 0
#define comment 1
#define comment_hash 2
#define str 3
#define backquote 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int giac_yylex_init (yyscan_t* scanner);

int giac_yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int giac_yylex_destroy (yyscan_t yyscanner );

int giac_yyget_debug (yyscan_t yyscanner );

void giac_yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE giac_yyget_extra (yyscan_t yyscanner );

void giac_yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *giac_yyget_in (yyscan_t yyscanner );

void giac_yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *giac_yyget_out (yyscan_t yyscanner );

void giac_yyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t giac_yyget_leng (yyscan_t yyscanner );

char *giac_yyget_text (yyscan_t yyscanner );

int giac_yyget_lineno (yyscan_t yyscanner );

void giac_yyset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * giac_yyget_lval (yyscan_t yyscanner );

void giac_yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int giac_yywrap (yyscan_t yyscanner );
#else
extern int giac_yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int giac_yylex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int giac_yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 278 "input_lexer.ll"


#line 1719 "input_lexer.cc"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			giac_yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		giac_yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1153 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1679 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 280 "input_lexer.ll"
/* skip whitespace */
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 281 "input_lexer.ll"
increment_lexer_line_number_setcol(yyscanner,yyextra); //cerr << "Scanning line " << lexer_line_number(yyextra) << endl;
	YY_BREAK
/* Strings */
/* \"[^\"]*\"        yylval = string2gen( giac_yytext); return T_STRING; */
case 3:
YY_RULE_SETUP
#line 284 "input_lexer.ll"
BEGIN(str); comment_s("",yyextra);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 285 "input_lexer.ll"
increment_comment_s('"',yyextra);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 286 "input_lexer.ll"
{  index_status(yyextra)=1; BEGIN(INITIAL); 
                  (*yylval)=string2gen(comment_s(yyextra),false); 
                  return T_STRING; }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 289 "input_lexer.ll"
increment_comment_s('\n',yyextra); increment_lexer_line_number_setcol(yyscanner,yyextra);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 290 "input_lexer.ll"
{
                   /* octal escape sequence */
                   int result;
                   (void) sscanf( yytext + 1, "%o", &result );
                   increment_comment_s(char(result & 0xff),yyextra);
                   }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 296 "input_lexer.ll"
{
                   /* generate error - bad escape sequence; something
                    * like '\48' or '\0777777'
                    */
                   }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 301 "input_lexer.ll"
increment_comment_s('\n',yyextra);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 302 "input_lexer.ll"
increment_comment_s('\t',yyextra);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 303 "input_lexer.ll"
increment_comment_s('\r',yyextra);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 304 "input_lexer.ll"
increment_comment_s('\b',yyextra);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 305 "input_lexer.ll"
increment_comment_s('\f',yyextra);
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 306 "input_lexer.ll"
increment_comment_s(yytext[1],yyextra);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 307 "input_lexer.ll"
increment_comment_s(yytext,yyextra);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 308 "input_lexer.ll"
if (rpn_mode(yyextra)){ index_status(yyextra)=0; return T_ACCENTGRAVE; } else { BEGIN(backquote); comment_s("",yyextra); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 309 "input_lexer.ll"
increment_comment_s('\n',yyextra); increment_lexer_line_number_setcol(yyscanner,yyextra);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 310 "input_lexer.ll"
increment_comment_s(yytext,yyextra);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 311 "input_lexer.ll"
{  index_status(yyextra)=1; BEGIN(INITIAL); 
  return find_or_make_symbol(comment_s(yyextra),(*yylval),yyscanner,true,yyextra); }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 314 "input_lexer.ll"
index_status(yyextra)=0; increment_lexer_line_number_setcol(yyscanner,yyextra);
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 315 "input_lexer.ll"
index_status(yyextra)=0; increment_lexer_line_number_setcol(yyscanner,yyextra);/* (*yylval) = string2gen('"'+string(giac_yytext).substr(2,string(giac_yytext).size()-3)+'"');   return T_COMMENT; */
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 316 "input_lexer.ll"
BEGIN(comment); comment_s(yyextra)="";
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 318 "input_lexer.ll"
comment_s(yyextra)+=yytext; /* eat anything that's not a '*' */
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 319 "input_lexer.ll"
comment_s(yyextra)+=yytext; /* eat up '*'s not followed by '/'s */
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 320 "input_lexer.ll"
comment_s(yyextra) += '\n'; increment_lexer_line_number_setcol(yyscanner,yyextra); cerr << "(Comment) scanning line " << lexer_line_number(yyextra) << endl;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 321 "input_lexer.ll"
BEGIN(INITIAL); index_status(yyextra)=0; /* (*yylval) = string2gen(comment_s(yyextra),false); return T_COMMENT; */
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 322 "input_lexer.ll"
index_status(yyextra)=0; /* (*yylval) = string2gen('"'+string(yytext).substr(3,string(yytext).size()-6)+'"'); return T_COMMENT; */
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 323 "input_lexer.ll"
index_status(yyextra)=0; /* (*yylval) = string2gen('"'+string(yytext).substr(3,string(yytext).size()-6)+'"'); return T_COMMENT; */
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 325 "input_lexer.ll"
if (index_status(yyextra)) return T_INTERROGATION; else return T_HELP;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 326 "input_lexer.ll"
opened_quote(yyextra) |= 2; return T_UNIT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 327 "input_lexer.ll"
if (opened_quote(yyextra) & 1) { opened_quote(yyextra) &= 0x7ffffffe; return T_QUOTE; } if (index_status(yyextra) && !in_rpn(yyextra) && xcas_mode(yyextra)!= 1) return T_PRIME; opened_quote(yyextra) |= 1; return T_QUOTE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 328 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==3) return TI_SEMI; (*yylval)=0; return T_SEMI;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 329 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==3) return T_SEMI; return TI_SEMI;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 330 "input_lexer.ll"
if (spread_formula(yyextra)) return T_DEUXPOINTS; if ( xcas_mode(yyextra)==3 ) { index_status(yyextra)=0; return TI_DEUXPOINTS; }  index_status(yyextra)=0; if (xcas_mode(yyextra)>0) { (*yylval)=1; return T_SEMI; } else return T_DEUXPOINTS;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 331 "input_lexer.ll"
(*yylval)=1; return T_SEMI;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 332 "input_lexer.ll"
return T_DOUBLE_DEUX_POINTS;
	YY_BREAK
/* special values */
case 37:
YY_RULE_SETUP
#line 336 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=theta__IDNT_e; return T_SYMBOL;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 337 "input_lexer.ll"
index_status(yyextra)=1; if (xcas_mode(yyextra) > 0 || !i_sqrt_minus1(yyextra)) { (*yylval)=i__IDNT_e; return T_SYMBOL; } else { (*yylval) = cst_i; return T_LITERAL;};
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 338 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL;
	YY_BREAK
/* \xef\xbd\x89            index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL; */
case 40:
YY_RULE_SETUP
#line 340 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 341 "input_lexer.ll"
index_status(yyextra)=1; if (xcas_mode(yyextra)==0 || xcas_mode(yyextra)==3 || rpn_mode(yyextra)) { return find_or_make_symbol(yytext,(*yylval),yyscanner,true,yyextra); } else { (*yylval) = cst_i; return T_LITERAL; };
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 342 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 343 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = symbolic(at_exp,1); return T_LITERAL;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 344 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 345 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 346 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 347 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 348 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 349 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_euler_gamma; return T_LITERAL;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 350 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = unsigned_inf; return T_LITERAL;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 351 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = unsigned_inf; return T_LITERAL;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 352 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = plus_inf; return T_LITERAL;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 353 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = unsigned_inf; return T_LITERAL;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 354 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = plus_inf; return T_LITERAL;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 355 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = minus_inf; return T_LITERAL;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 356 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = undef; return T_LITERAL;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 357 "input_lexer.ll"
return T_END_INPUT;
	YY_BREAK
/* integer values */
case 58:
YY_RULE_SETUP
#line 360 "input_lexer.ll"
if (xcas_mode(yyextra)==2){ (*yylval) = gen(at_user_operator,6); index_status(yyextra)=0; return T_UNARY_OP; }  index_status(yyextra)=0; (*yylval) = _FUNC; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 361 "input_lexer.ll"
if (xcas_mode(yyextra)==3) { index_status(yyextra)=1; return find_or_make_symbol(yytext,(*yylval),yyscanner,true,yyextra); } index_status(yyextra)=0; (*yylval) = _MAPLE_LIST ; (*yylval).subtype=_INT_MAPLECONVERSION ;return T_TYPE_ID;
	YY_BREAK
/* vector/polynom/matrice delimiters */
case 60:
YY_RULE_SETUP
#line 365 "input_lexer.ll"
(*yylval) = _SEQ__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 366 "input_lexer.ll"
(*yylval) = _SET__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 367 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _LIST__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 368 "input_lexer.ll"
(*yylval) = _RPN_FUNC__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 369 "input_lexer.ll"
(*yylval) = _GROUP__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 370 "input_lexer.ll"
(*yylval) = _LINE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 371 "input_lexer.ll"
(*yylval) = _VECTOR__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 372 "input_lexer.ll"
(*yylval) = _MATRIX__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 373 "input_lexer.ll"
(*yylval) = _PNT__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 374 "input_lexer.ll"
(*yylval) = _POINT__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 375 "input_lexer.ll"
(*yylval) = _CURVE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 376 "input_lexer.ll"
(*yylval) = _HALFLINE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 377 "input_lexer.ll"
(*yylval) = _POLY1__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 378 "input_lexer.ll"
(*yylval) = _ASSUME__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 379 "input_lexer.ll"
(*yylval) = _SPREAD__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 380 "input_lexer.ll"
(*yylval) = _FOLDER__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 381 "input_lexer.ll"
(*yylval) = _POLYEDRE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 382 "input_lexer.ll"
(*yylval) = _RGBA__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 383 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _LIST__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 384 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 385 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_strict,2);  return T_TEST_EQUAL;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 386 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_strict,2); return T_TEST_EQUAL;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 387 "input_lexer.ll"
index_status(yyextra)=0; return T_VIRGULE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 388 "input_lexer.ll"
index_status(yyextra)=0; return T_VIRGULE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 389 "input_lexer.ll"
index_status(yyextra)=0; *yylval = 0; return T_BEGIN_PAR;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 390 "input_lexer.ll"
index_status(yyextra)=1; return T_END_PAR;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 391 "input_lexer.ll"
if (index_status(yyextra)) { index_status(yyextra)=0; return T_INDEX_BEGIN; } else { (*yylval) = 0; return T_VECT_DISPATCH; } ;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 392 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 393 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _POLY1__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 394 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 395 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _MATRIX__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 396 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 397 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _ASSUME__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 398 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
/* geometric delimiters */
case 94:
YY_RULE_SETUP
#line 400 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _GROUP__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 401 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 402 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _LINE__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 403 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 404 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _VECTOR__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 405 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 406 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _CURVE__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 407 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
/* gen delimiters */
case 102:
YY_RULE_SETUP
#line 409 "input_lexer.ll"
index_status(yyextra)=0; if (rpn_mode(yyextra)) { (*yylval)=0; return T_VECT_DISPATCH; } if (xcas_mode(yyextra)==3 || abs_calc_mode(yyextra)==38){ (*yylval) = _LIST__VECT;  return T_VECT_DISPATCH; } if (xcas_mode(yyextra) > 0 ){ (*yylval)=_SET__VECT; return T_VECT_DISPATCH; } else return T_BLOC_BEGIN;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 410 "input_lexer.ll"
index_status(yyextra)=1; if (rpn_mode(yyextra)) return T_VECT_END; if (xcas_mode(yyextra)==3 || abs_calc_mode(yyextra)==38) return T_VECT_END; if (xcas_mode(yyextra) > 0) return T_VECT_END; else return T_BLOC_END;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 411 "input_lexer.ll"
index_status(yyextra)=0;  (*yylval)=_SET__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 412 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 413 "input_lexer.ll"
index_status(yyextra)=0; return T_ROOTOF_BEGIN;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 414 "input_lexer.ll"
index_status(yyextra)=1; return T_ROOTOF_END;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 415 "input_lexer.ll"
index_status(yyextra)=0; return T_SPOLY1_BEGIN;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 416 "input_lexer.ll"
index_status(yyextra)=1; return T_SPOLY1_END;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 417 "input_lexer.ll"
index_status(yyextra)=0; ++in_rpn(yyextra); return T_RPN_BEGIN;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 418 "input_lexer.ll"
index_status(yyextra)=0; --in_rpn(yyextra); return T_RPN_END;
	YY_BREAK
/* binary operators */
case 112:
YY_RULE_SETUP
#line 421 "input_lexer.ll"
index_status(yyextra)=0; return T_MAPSTO;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 422 "input_lexer.ll"
(*yylval) = gen(at_couleur,2); index_status(yyextra)=0; return T_INTERVAL;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 423 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_same,2); return T_TEST_EQUAL;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 424 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_same,2); return T_QUOTED_BINARY;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 425 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_same,2); return T_QUOTED_BINARY;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 426 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_TEST_EQUAL;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 427 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_QUOTED_BINARY;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 428 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_TEST_EQUAL;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 429 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_QUOTED_BINARY;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 430 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_QUOTED_BINARY;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 431 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_egal,2); return T_QUOTED_BINARY;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 432 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_egal,2); return T_QUOTED_BINARY;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 433 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_egal,2); return T_TEST_EQUAL;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 434 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_strict,2); return T_QUOTED_BINARY;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 435 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_strict,2); return T_QUOTED_BINARY;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 436 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_strict,2); return T_QUOTED_BINARY;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 437 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_egal,2); return T_TEST_EQUAL;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 438 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_egal,2); return T_QUOTED_BINARY;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 439 "input_lexer.ll"
spread_formula(yyextra)=!index_status(yyextra); index_status(yyextra)=0; (*yylval)=gen(at_equal,2); return T_EQUAL;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 440 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_equal,2); return T_QUOTED_BINARY;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 441 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_dollar,2); if (xcas_mode(yyextra)>0) return T_DOLLAR_MAPLE; else return T_DOLLAR;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 442 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_dollar,2); return T_DOLLAR_MAPLE;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 443 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_dollar,2); return T_QUOTED_BINARY;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 444 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_dollar,2); return T_QUOTED_BINARY;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 445 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return T_AFFECT;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 446 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return T_QUOTED_BINARY;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 447 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return T_QUOTED_BINARY;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 448 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return TI_STO;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 449 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return TI_STO;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 450 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_array_sto,2); return T_AFFECT;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 451 "input_lexer.ll"
index_status(yyextra)=1; yytext[0]='0'; (*yylval) = symb_double_deux_points(makevecteur(_IDNT_id_at,chartab2gen(yytext,yyextra))); return T_SYMBOL;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 452 "input_lexer.ll"
if (xcas_mode(yyextra)!=3) {index_status(yyextra)=0; (*yylval)=gen(at_compose,2); return T_COMPOSE; } BEGIN(comment_hash);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 453 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_composepow,2); return T_POW;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 454 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_composepow,2); return T_QUOTED_BINARY;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 455 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_composepow,2); return T_QUOTED_BINARY;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 456 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_compose,2); return T_QUOTED_BINARY;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 457 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_compose,2); return T_QUOTED_BINARY;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 458 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_AND_OP;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 459 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_AND_OP;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 460 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_QUOTED_BINARY;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 461 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_QUOTED_BINARY;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 462 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_QUOTED_BINARY;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 463 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_tilocal,2); return T_PIPE;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 464 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_AND_OP;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 465 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_QUOTED_BINARY;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 466 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_QUOTED_BINARY;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 467 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_QUOTED_BINARY;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 468 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_AND_OP;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 469 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_xor,2); return T_AND_OP;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 470 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_xor,2); return T_QUOTED_BINARY;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 471 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_xor,2); return T_QUOTED_BINARY;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 472 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_xor,2); return T_AND_OP;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 473 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_interval,2); return T_INTERVAL;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 474 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_interval,2); return T_QUOTED_BINARY;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 475 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_interval,2); return T_QUOTED_BINARY;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 476 "input_lexer.ll"
if (xcas_mode(yyextra) || index_status(yyextra)) { (*yylval)=gen(at_factorial); return T_FACTORIAL; } else { index_status(yyextra)=0; (*yylval)=gen(at_not,1); return T_NOT; }
	YY_BREAK
/* standard functions */
case 168:
YY_RULE_SETUP
#line 479 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=symbolic(at_Ans,0); return T_LITERAL;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 480 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_PLUS;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 481 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_increment,1); return T_FACTORIAL;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 482 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_increment,1); return T_PLUS;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 483 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_decrement,1); return T_FACTORIAL;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 484 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_decrement,1); return T_PLUS;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 485 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_PLUS;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 486 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_PLUS;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 487 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sqrt,2); return T_NOT;
	YY_BREAK
/* "∡" angle */
case 177:
YY_RULE_SETUP
#line 489 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=2; return T_SQ;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 490 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=3; return T_SQ;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 491 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=4; return T_SQ;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 492 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=5; return T_SQ;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 493 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=6; return T_SQ;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 494 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=7; return T_SQ;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 495 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=8; return T_SQ;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 496 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=9; return T_SQ;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 497 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=-1; return T_SQ;
	YY_BREAK
/* "','"                   index_status(yyextra)=0; (*yylval)=gen(at_makevector,2); return T_QUOTED_BINARY; commented because of f('a','b') */
case 186:
YY_RULE_SETUP
#line 499 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 500 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 501 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_binary_minus,2); return (calc_mode(yyextra)==38)?T_MOINS38:T_MOINS;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 502 "input_lexer.ll"
index_status(yyextra)=0; if (calc_mode(yyextra)==38){ (*yylval)=gen(at_neg,2); return T_NEG38; } else { cerr << 1 << endl; (*yylval)=gen(at_binary_minus,2); return T_MOINS;}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 503 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_binary_minus,2); return T_MOINS;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 504 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_binary_minus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 505 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_binary_minus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 506 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_prod,2); return T_FOIS;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 507 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_multcrement,1); return T_FOIS;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 508 "input_lexer.ll"
index_status(yyextra)=0; if (abs_calc_mode(yyextra)==38){return T_DOUBLE_DEUX_POINTS; } else {(*yylval)=gen(at_prod,2); return T_FOIS;}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 509 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ampersand_times,2); return T_FOIS;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 510 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_quote_pow,2); return T_POW;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 511 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointprod,2); return T_FOIS;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 512 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_prod,2); return T_QUOTED_BINARY;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 513 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_prod,2); return T_QUOTED_BINARY;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 514 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_division,2); return T_DIV;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 515 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_divcrement,1); return T_DIV;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 516 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointdivision,2); return T_DIV;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 517 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_division,2); return T_QUOTED_BINARY;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 518 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_division,2); return T_QUOTED_BINARY;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 519 "input_lexer.ll"
index_status(yyextra)=0; if (abs_calc_mode(yyextra)==38){ (*yylval)=gen(at_PERCENT); return T_UNARY_OP_38; } if (xcas_mode(yyextra)==3) { (*yylval)=gen(at_pourcent); return T_FACTORIAL; } if (xcas_mode(yyextra)==1) { (*yylval)=symbolic(at_ans,vecteur(0)); return T_NUMBER; }  if (xcas_mode(yyextra)) (*yylval)=gen(at_irem,2); else (*yylval)=0; return T_MOD;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 520 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==0){ (*yylval)=gen(at_iquorem,2); return T_MOD;} (*yylval)=symbolic(at_ans,-2); return T_NUMBER; 
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 521 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_polar_complex,2); return T_MOD;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 522 "input_lexer.ll"
if (xcas_mode(yyextra)==0){ (*yylval)=gen(at_quorem,2); return T_MOD;} index_status(yyextra)=0; (*yylval)=symbolic(at_ans,-3); return T_NUMBER; 
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 523 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_irem,2); return T_QUOTED_BINARY;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 524 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==3) { (*yylval)=gen(at_irem,2); return T_UNARY_OP; } else { if (xcas_mode(yyextra)) (*yylval)=gen(at_irem,2); else (*yylval)=0; return T_MOD; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 525 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_irem,2); return T_QUOTED_BINARY;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 526 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_irem,2); return T_QUOTED_BINARY;
	YY_BREAK
/* "MOD"                   index_status(yyextra)=0; return T_MOD; */
case 214:
YY_RULE_SETUP
#line 528 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pow,2); return T_POW;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 529 "input_lexer.ll"
(*yylval) = gen(at_pow,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 530 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pow,2); return T_POW;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 531 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointpow,2); return T_POW;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 532 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pow,2); return T_QUOTED_BINARY;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 533 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pow,2); return T_QUOTED_BINARY;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 534 "input_lexer.ll"
(*yylval) = gen(at_Digits,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 535 "input_lexer.ll"
(*yylval) = gen(at_HDigits,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 536 "input_lexer.ll"
(*yylval) = gen(at_HAngle,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 537 "input_lexer.ll"
(*yylval) = gen(at_HFormat,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 538 "input_lexer.ll"
(*yylval) = gen(at_HComplex,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 539 "input_lexer.ll"
(*yylval) = gen(at_HLanguage,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 540 "input_lexer.ll"
(*yylval) = gen(at_Digits,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 541 "input_lexer.ll"
(*yylval) = gen(at_threads,0) ; index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 542 "input_lexer.ll"
(*yylval) = gen(at_scientific_format,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 543 "input_lexer.ll"
(*yylval) = gen(at_angle_radian,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 544 "input_lexer.ll"
(*yylval) = gen(at_approx_mode,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 545 "input_lexer.ll"
(*yylval) = gen(at_all_trig_solutions,1); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 546 "input_lexer.ll"
(*yylval) = gen(at_ntl_on,1); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 547 "input_lexer.ll"
(*yylval) = gen(at_complex_mode,1); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 548 "input_lexer.ll"
(*yylval) = gen(at_complex_variables,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 549 "input_lexer.ll"
(*yylval) = gen(at_epsilon,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 550 "input_lexer.ll"
(*yylval) = gen(at_proba_epsilon,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 552 "input_lexer.ll"
(*yylval) = gen(at_acos,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 553 "input_lexer.ll"
(*yylval) = gen(at_randNorm,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 554 "input_lexer.ll"
(*yylval) = gen(at_acosh,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 555 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_args,0); return T_QUOTED_BINARY;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 556 "input_lexer.ll"
(*yylval) = gen(at_asin,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 557 "input_lexer.ll"
(*yylval) = gen(at_asinh,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 558 "input_lexer.ll"
(*yylval) = gen(at_at,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 559 "input_lexer.ll"
(*yylval) = gen(at_atan,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 560 "input_lexer.ll"
(*yylval) = gen(at_atanh,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 561 "input_lexer.ll"
(*yylval) = gen(at_backquote,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 562 "input_lexer.ll"
(*yylval) = gen(at_bloc,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 563 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_break,0); return T_BREAK;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 564 "input_lexer.ll"
index_status(yyextra)=0; if (abs_calc_mode(yyextra)==38) return T_CASE38; else return T_CASE;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 565 "input_lexer.ll"
(*yylval) = gen(at_cont,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 566 "input_lexer.ll"
(*yylval) = gen(at_debug,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 567 "input_lexer.ll"
(*yylval) = gen(at_derive,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 568 "input_lexer.ll"
if (xcas_mode(yyextra)==1 || xcas_mode(yyextra)==2) { (*yylval) = gen(at_function_diff,1); index_status(yyextra)=1; return T_UNARY_OP;} else { index_status(yyextra)=1; return find_or_make_symbol(yytext,(*yylval),yyscanner,true,yyextra); }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 569 "input_lexer.ll"
if (xcas_mode(yyextra)==1 || xcas_mode(yyextra)==2) { (*yylval)=e__IDNT_e; }else (*yylval)=symbolic(at_exp,1); return T_NUMBER;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 570 "input_lexer.ll"
(*yylval) = gen(at_equal,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 571 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_throw,1); return T_RETURN;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 572 "input_lexer.ll"
(*yylval) = gen(at_erase,0); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 573 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_throw,1); return T_RETURN;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 574 "input_lexer.ll"
if (xcas_mode(yyextra)==3) (*yylval)=gen(at_partfrac); else (*yylval) = gen(at_expand,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 575 "input_lexer.ll"
(*yylval) = gen(at_insmod,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 576 "input_lexer.ll"
(*yylval) = gen(at_expand,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 577 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_FOR;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 578 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_FOR;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 579 "input_lexer.ll"
(*yylval) = gen(at_halt,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 580 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_BLOC_END;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 581 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_BLOC_END;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 582 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_BLOC_END;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 583 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_IF;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 584 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); if (rpn_mode(yyextra)) return T_RPN_IF; return T_IF; 
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 585 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_IFTE;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 586 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_when,3); return T_IFTE;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 587 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_QUOTED_BINARY;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 588 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_QUOTED_BINARY;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 589 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_QUOTED_BINARY;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 590 "input_lexer.ll"
if (xcas_mode(yyextra)==1) (*yylval) = gen(at_maple_ifactors); else (*yylval) = gen(at_ifactors,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 591 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_intersect,2); return T_QUOTED_BINARY;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 592 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_intersect,2); return T_QUOTED_BINARY;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 593 "input_lexer.ll"
(*yylval) = gen(at_kill,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 594 "input_lexer.ll"
(*yylval) = gen(at_ln,1); index_status(yyextra)=1; return T_UNARY_OP; /* index_status(yyextra)=1 to accept log[] for a basis log */
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 595 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_minus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 596 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_minus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 597 "input_lexer.ll"
(*yylval) = gen(at_not,1); if (xcas_mode(yyextra)) return T_NOT;  index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 598 "input_lexer.ll"
(*yylval) = gen(at_not,1); return T_NOT;  
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 599 "input_lexer.ll"
(*yylval) = gen(at_neg,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 600 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_not,1); return T_QUOTED_BINARY;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 601 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_not,1); return T_QUOTED_BINARY;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 602 "input_lexer.ll"
(*yylval) = gen(at_greduce,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 603 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_of,2); return T_QUOTED_BINARY;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 604 "input_lexer.ll"
if (xcas_mode(yyextra)==1) (*yylval) = gen(at_maple_op,1); else (*yylval) = gen(at_feuille,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 605 "input_lexer.ll"
(*yylval) = gen(at_feuille,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 606 "input_lexer.ll"
(*yylval)=2; index_status(yyextra)=0; return T_LOCAL;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 607 "input_lexer.ll"
(*yylval) = gen(at_pcoeff,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 608 "input_lexer.ll"
(*yylval) = gen(at_funcplot,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 609 "input_lexer.ll"
(*yylval) = gen(at_user_operator,6); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 610 "input_lexer.ll"
if (rpn_mode(yyextra)) {(*yylval)=gen(at_purge,0); index_status(yyextra)=0; return T_RPN_OP;} else {(*yylval) = gen(at_purge,1); index_status(yyextra)=0; return T_UNARY_OP;};
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 611 "input_lexer.ll"
if (rpn_mode(yyextra)) {(*yylval)=gen(at_purge,0); index_status(yyextra)=0; return T_RPN_OP;} else {(*yylval) = gen(at_purge,1); index_status(yyextra)=0; return T_UNARY_OP;};
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 612 "input_lexer.ll"
if (rpn_mode(yyextra)) {(*yylval)=gen(at_purge,0); index_status(yyextra)=0; return T_RPN_OP;} else {(*yylval) = gen(at_purge,1); index_status(yyextra)=0; return T_UNARY_OP;};
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 613 "input_lexer.ll"
(*yylval) = gen(at_srand,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 614 "input_lexer.ll"
(*yylval) = gen(at_for,1) ; index_status(yyextra)=0; return T_REPEAT;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 615 "input_lexer.ll"
(*yylval) = gen(at_for,1) ; index_status(yyextra)=0; return T_REPEAT;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 616 "input_lexer.ll"
(*yylval) = gen(at_for,1) ;index_status(yyextra)=0; return T_REPEAT;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 617 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 618 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 619 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 620 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_QUOTED_BINARY;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 621 "input_lexer.ll"
(*yylval) = gen(at_maple_root,1); index_status(yyextra)=1; return T_UNARY_OP;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 622 "input_lexer.ll"
(*yylval) = gen(at_same,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 623 "input_lexer.ll"
(*yylval) = gen(at_sst,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 624 "input_lexer.ll"
(*yylval) = gen(at_sst_in,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 625 "input_lexer.ll"
if (xcas_mode(yyextra)==1) (*yylval) = gen(at_maple_subs,2); else (*yylval) = gen(at_subs,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 626 "input_lexer.ll"
if (xcas_mode(yyextra)==1) (*yylval) = gen(at_maple_subsop,2); else (*yylval) = gen(at_subsop,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 627 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_union,2); return T_QUOTED_BINARY;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 628 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_union,2); return T_QUOTED_BINARY;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 629 "input_lexer.ll"
(*yylval) = gen(at_virgule,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 630 "input_lexer.ll"
(*yylval) = gen(at_VARS,0); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 631 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); if (xcas_mode(yyextra)==3) return TI_WHILE; if (xcas_mode(yyextra)!=0) return T_MUPMAP_WHILE; return T_WHILE;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 632 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_MUPMAP_WHILE; /* return T_RPN_WHILE; */
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 633 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_DO; /* must be here for DO ... END loop */
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 634 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_DO; /* must be here for DO ... END loop */
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 635 "input_lexer.ll"
(*yylval) = gen(at_Text,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 636 "input_lexer.ll"
(*yylval) = gen(at_DropDown,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 637 "input_lexer.ll"
(*yylval) = gen(at_Popup,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 638 "input_lexer.ll"
(*yylval) = gen(at_Request,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 639 "input_lexer.ll"
(*yylval) = gen(at_Title,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 640 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return TI_PRGM;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 641 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return TI_PRGM;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 642 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return TI_PRGM;
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 643 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_IF;
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 644 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 645 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_breakpoint,0); return T_BREAK;
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 646 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return TI_LOOP;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 647 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return TI_FOR;
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 648 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return TI_WHILE;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 649 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return T_CONTINUE;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 650 "input_lexer.ll"
(*yylval) = gen(at_print,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 651 "input_lexer.ll"
(*yylval) = gen(at_Pause,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 652 "input_lexer.ll"
(*yylval) = gen(at_label,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 653 "input_lexer.ll"
(*yylval) = gen(at_goto,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 654 "input_lexer.ll"
(*yylval) = gen(at_Dialog,1) ; index_status(yyextra)=0; return TI_DIALOG; 
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 655 "input_lexer.ll"
(*yylval) = gen(at_Row,0) ; index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 656 "input_lexer.ll"
(*yylval) = gen(at_Col,0) ; index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 658 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_DELTALIST); return T_UNARY_OP_38; 
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 659 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_PILIST); return T_UNARY_OP_38; 
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 660 "input_lexer.ll"
index_status(yyextra)=0;(*yylval)=gen(at_HPSUM); return T_UNARY_OP_38; 
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 661 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_SIGMALIST); return T_UNARY_OP_38;
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 662 "input_lexer.ll"
index_status(yyextra)=0;(*yylval)=gen(at_HPDIFF); return T_UNARY_OP_38; 
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 663 "input_lexer.ll"
index_status(yyextra)=0;(*yylval)=gen(at_HPINT); return T_UNARY_OP_38; 
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 664 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_egal,2); return T_TEST_EQUAL;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 665 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_TEST_EQUAL;
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 666 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_egal,2); return T_TEST_EQUAL;
	YY_BREAK
/* old format for physical constants
"_hbar_"        (*yylval) = symbolic(at_unit,makevecteur(1.05457266e-34,_J_unit*_s_unit)); index_status(yyextra)=0; return T_SYMBOL;
"_c_"        (*yylval) = symbolic(at_unit,makevecteur(299792458,_m_unit/_s_unit)); index_status(yyextra)=0; return T_SYMBOL;
"_g_"        (*yylval) = symbolic(at_unit,makevecteur(9.80665,_m_unit*unitpow(_s_unit,-2))); index_status(yyextra)=0; return T_SYMBOL;
"_IO_" (*yylval) = symbolic(at_unit,makevecteur(1e-12,_W_unit*unitpow(_m_unit,-2))); index_status(yyextra)=0; return T_SYMBOL; 
"_epsilonox_" (*yylval) = 3.9; index_status(yyextra)=0; return T_SYMBOL; 
"_epsilonsi_" (*yylval) = 11.9; index_status(yyextra)=0; return T_SYMBOL; 
"_qepsilon0_" (*yylval) = symbolic(at_unit,makevecteur(1.4185979e-30,_F_unit*_C_unit/_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_epsilon0q_" (*yylval) = symbolic(at_unit,makevecteur(55263469.6,_F_unit/(_m_unit*_C_unit))); index_status(yyextra)=0; return T_SYMBOL; 
"_kq_" (*yylval) = symbolic(at_unit,makevecteur(8.617386e-5,_J_unit/(_K_unit*_C_unit))); index_status(yyextra)=0; return T_SYMBOL; 
"_c3_" (*yylval) = symbolic(at_unit,makevecteur(.002897756,_m_unit*_K_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_lambdac_" (*yylval) = symbolic(at_unit,makevecteur( 0.00242631058e-9,_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_f0_" (*yylval) = symbolic(at_unit,makevecteur(2.4179883e14,_Hz_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_lambda0_" (*yylval) = symbolic(at_unit,makevecteur(1239.8425e-9,_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_muN_" (*yylval) = symbolic(at_unit,makevecteur(5.0507866e-27,_J_unit/_T_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_muB_" (*yylval) = symbolic(at_unit,makevecteur( 9.2740154e-24,_J_unit/_T_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_a0_" (*yylval) = symbolic(at_unit,makevecteur(.0529177249e-9,_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_Rinfinity_" (*yylval) = symbolic(at_unit,makevecteur(10973731.534,unitpow(_m_unit,-1))); index_status(yyextra)=0; return T_SYMBOL; 
"_Faraday_" (*yylval) = symbolic(at_unit,makevecteur(96485.309,_C_unit/_mol_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_phi_" (*yylval) = symbolic(at_unit,makevecteur(2.06783461e-15,_Wb_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_alpha_" (*yylval) = 7.29735308e-3; index_status(yyextra)=0; return T_SYMBOL; 
"_mpme_" (*yylval) = 1836.152701; index_status(yyextra)=0; return T_SYMBOL; 
"_mp_" (*yylval) = symbolic(at_unit,makevecteur(1.6726231e-27,_kg_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_qme_" (*yylval) = symbolic(at_unit,makevecteur(1.75881962e11,_C_unit/_kg_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_me_" (*yylval) = symbolic(at_unit,makevecteur(9.1093897e-31,_kg_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_qe_" (*yylval) = symbolic(at_unit,makevecteur(1.60217733e-19,_C_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_h_" (*yylval) = symbolic(at_unit,makevecteur(6.6260755e-34,_J_unit*_s_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_G_" (*yylval) = symbolic(at_unit,makevecteur(6.67259e-11,unitpow(_m_unit,3)*unitpow(_s_unit,-2)*unitpow(_kg_unit,-1))); index_status(yyextra)=0; return T_SYMBOL; 
"_mu0_" (*yylval) = symbolic(at_unit,makevecteur(1.25663706144e-6,_H_unit/_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_epsilon0_" (*yylval) = symbolic(at_unit,makevecteur(8.85418781761e-12,_F_unit/_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_sigma_" (*yylval) = symbolic(at_unit,makevecteur( 5.67051e-8,_W_unit*unitpow(_m_unit,-2)*unitpow(_K_unit,-4))); index_status(yyextra)=0; return T_SYMBOL; 
"_StdP_" (*yylval) = symbolic(at_unit,makevecteur(101325.0,_Pa_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_StdT_" (*yylval) = symbolic(at_unit,makevecteur(273.15,_K_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_R_" (*yylval) = symbolic(at_unit,makevecteur(8.31451,_J_unit/_molK_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_Vm_" (*yylval) = symbolic(at_unit,makevecteur(22.4141,_l_unit/_mol_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_k_" (*yylval) = symbolic(at_unit,makevecteur(1.380658e-23,_J_unit/_K_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_NA_" (*yylval) = symbolic(at_unit,makevecteur(6.0221367e23,unitpow(_mol_unit,-1))); index_status(yyextra)=0; return T_SYMBOL; 
"_mSun_" (*yylval) = symbolic(at_unit,makevecteur(1.989e30,_kg_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_RSun_" (*yylval) = symbolic(at_unit,makevecteur(6.955e8,_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_PSun_" (*yylval) = symbolic(at_unit,makevecteur(3.846e26,_W_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_mEarth_" (*yylval) = symbolic(at_unit,makevecteur(5.9736e24,_kg_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_REarth_" (*yylval) = symbolic(at_unit,makevecteur(6.371e6,_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_sd_" (*yylval) = symbolic(at_unit,makevecteur(8.61640905e4,_s_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_syr_" (*yylval) = symbolic(at_unit,makevecteur(3.15581498e7,_s_unit)); index_status(yyextra)=0; return T_SYMBOL; 
                        */
/* numbers, also accept DMS e.g 1°15′27″13 */
case 351:
#line 714 "input_lexer.ll"
case 352:
#line 715 "input_lexer.ll"
case 353:
#line 716 "input_lexer.ll"
case 354:
#line 717 "input_lexer.ll"
case 355:
#line 718 "input_lexer.ll"
case 356:
#line 719 "input_lexer.ll"
case 357:
#line 720 "input_lexer.ll"
case 358:
#line 721 "input_lexer.ll"
case 359:
#line 722 "input_lexer.ll"
case 360:
#line 723 "input_lexer.ll"
case 361:
#line 724 "input_lexer.ll"
case 362:
#line 725 "input_lexer.ll"
case 363:
#line 726 "input_lexer.ll"
case 364:
#line 727 "input_lexer.ll"
case 365:
#line 728 "input_lexer.ll"
case 366:
#line 729 "input_lexer.ll"
case 367:
#line 730 "input_lexer.ll"
case 368:
#line 731 "input_lexer.ll"
case 369:
#line 732 "input_lexer.ll"
case 370:
#line 733 "input_lexer.ll"
case 371:
YY_RULE_SETUP
#line 733 "input_lexer.ll"
{ 
  index_status(yyextra)=1;
  int l=strlen(yytext);
  char ch,ch2;
  if (l>2 && yytext[1]!='x' && (yytext[l-1]=='o' || yytext[l-1]=='b' || yytext[l-1]=='h') ){
    char base=yytext[l-1];
    for (int i=l-1;i>1;--i){
      yytext[i]=yytext[i-1];
    }
    if (base=='h')
      base='x';
    yytext[1]=base;
  }
  else {
    for (l=0;(ch=*(yytext+l));++l){
      if (ch=='x')
	break;
      if (ch=='e' || ch=='E'){
	if ( (ch2=*(yytext+l+1)) && (ch2=='e' || ch2=='E')){
	  ++l;
	  for (;(ch=*(yytext+l));++l)
	    *(yytext+l-1)=ch;
	  *(yytext+l-1)=0;
	  --l;
	}
      }
#ifndef BCD
      if ( (ch==-30 && *(yytext+l+1)==-128) || (ch==-62 && *(yytext+l+1)==-80) ){
	*yylval=0; return T_NUMBER;
      }
#endif
      if (ch==-30 && *(yytext+l+1)==-120 &&  *(yytext+l+2)==-110){
	l += 3;
	for (;(ch=*(yytext+l));++l)
	  *(yytext+l-2)=ch;
	*(yytext+l-2)=0;
	l -= 3;
	*(yytext+l)='-';
      }
    }
  }
  (*yylval) = chartab2gen(yytext,yyextra); return T_NUMBER; 
}
	YY_BREAK
/* UNITS 
"_"{A}{AN}* {
  std::pair<const char * const * const,const char * const * const> pp=equal_range(unitname_tab,unitname_tab_end,yytext,tri2);
  if (pp.first!=pp.second && pp.second!=unitname_tab_end){
    gen tmp=mksa_register_unit(*pp.first,unitptr_tab[pp.first-unitname_tab]);
    (*yylval)=tmp;
    index_status(yyextra)=0;
    return T_SYMBOL;
  }
  int res=find_or_make_symbol(yytext+1,(*yylval),yyscanner,false,yyextra);
 (*yylval)=symb_unit(1,(*yylval),yyextra);
 return res;
}
			*/
/* symbols */
case 372:
#line 793 "input_lexer.ll"
case 373:
YY_RULE_SETUP
#line 793 "input_lexer.ll"
{
 index_status(yyextra)=1;
 int res=find_or_make_symbol(yytext,(*yylval),yyscanner,true,yyextra);
 if (res==T_NUMBER)
   *yylval=(*yylval)(string2gen(unlocalize(yytext),false),yyextra);
 return res;
} 
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 800 "input_lexer.ll"
if (!xcas_mode(yyextra) || xcas_mode(yyextra)==3) { 
  // cerr << "hash" << endl;
  (*yylval)=gen(at_hash,1); return TI_HASH; 
} else BEGIN(comment_hash);
	YY_BREAK
case 375:
/* rule 375 can match eol */
YY_RULE_SETUP
#line 804 "input_lexer.ll"
BEGIN(INITIAL); index_status(yyextra)=0; increment_lexer_line_number_setcol(yyscanner,yyextra);  /* comment_s(yyextra)=string(yytext); (*yylval)=string2gen(comment_s(yyextra).substr(0,comment_s(yyextra).size()-1),false); return T_COMMENT; */
	YY_BREAK
/* everything else */
case 376:
YY_RULE_SETUP
#line 806 "input_lexer.ll"
(*yylval)=string2gen(string(yytext),false); return T_STRING;
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 808 "input_lexer.ll"
ECHO;
	YY_BREAK
#line 3774 "input_lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(comment_hash):
case YY_STATE_EOF(str):
case YY_STATE_EOF(backquote):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * giac_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( giac_yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of giac_yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					giac_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			giac_yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) giac_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1153 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1153 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1152);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					giac_yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( giac_yywrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void giac_yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        giac_yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	giac_yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	giac_yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void giac_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		giac_yypop_buffer_state();
	 *		giac_yypush_buffer_state(new_buffer);
     */
	giac_yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	giac_yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (giac_yywrap()) processing, but the only time this flag
	 * is looked at is after giac_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void giac_yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE giac_yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) giac_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) giac_yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	giac_yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with giac_yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void giac_yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		giac_yyfree((void *) b->yy_ch_buf ,yyscanner );

	giac_yyfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a giac_yyrestart() or at EOF.
 */
    static void giac_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	giac_yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then giac_yy_init_buffer was _probably_
     * called from giac_yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void giac_yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		giac_yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void giac_yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	giac_yyensure_buffer_stack(yyscanner);

	/* This block is copied from giac_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from giac_yy_switch_to_buffer. */
	giac_yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void giac_yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	giac_yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		giac_yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void giac_yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)giac_yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in giac_yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)giac_yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in giac_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE giac_yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) giac_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	giac_yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to giac_yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       giac_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE giac_yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return giac_yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to giac_yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE giac_yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) giac_yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = giac_yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in giac_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE giac_yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int giac_yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int giac_yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *giac_yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *giac_yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t giac_yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *giac_yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void giac_yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void giac_yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "giac_yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void giac_yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "giac_yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see giac_yy_switch_to_buffer
 */
void giac_yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void giac_yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int giac_yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void giac_yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * giac_yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void giac_yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* giac_yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int giac_yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) giac_yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* giac_yylex_init_extra has the same functionality as giac_yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to giac_yyalloc in
 * the yyextra field.
 */

int giac_yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    giac_yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) giac_yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    giac_yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from giac_yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * giac_yylex_init()
     */
    return 0;
}

/* giac_yylex_destroy is for both reentrant and non-reentrant scanners. */
int giac_yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		giac_yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		giac_yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	giac_yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        giac_yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * giac_yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    giac_yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *giac_yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *giac_yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void giac_yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see giac_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 808 "input_lexer.ll"



/*
 *  Routines
 */
#ifndef NO_NAMESPACE_GIAC
  namespace giac {
#endif // ndef NO_NAMESPACE_GIAC
    
    void update_lexer_localization(const std::vector<int> & v,std::map<std::string,std::string> &lexer_map,std::multimap<std::string,giac::localized_string> &back_lexer_map){
      lexer_map.clear();
      back_lexer_map.clear();
      int s=v.size();
      for (int i=0;i<s;++i){
	int lang=v[i];
	if (lang>=1 && lang<=4){
	  std::string doc=find_doc_prefix(lang);
	  std::string file=giac::giac_aide_dir()+doc+"keywords";
	  std::string giac_kw,local_kw;
	  size_t l;
	  char * line = (char *)malloc(1024);
	  ifstream f(file.c_str());
	  if (f){
	    cerr << "// Using keyword file " << file << endl;
	    for (;;){
	      f.getline(line,1023,'\n');
	      l=strlen(line);
	      if (f.eof()){
		f.close();
		break;
	      }
	      if (l>3 && line[0]!='#'){
		if (line[l-1]=='\n')
		  --l;
		// read giac keyword
		size_t j;
		giac_kw="";
		for (j=0;j<l;++j){
		  if (line[j]==' ')
		    break;
		  giac_kw += line[j];
		}
		// read corresponding local keywords
		local_kw="";
		for (++j;j<l;++j){
		  if (line[j]==' '){
		    if (!local_kw.empty()){
		      lexer_map[local_kw]=giac_kw;
		      back_lexer_map.insert(pair<string,localized_string>(giac_kw,localized_string(lang,local_kw)));
		    }
		    local_kw="";
		  }
		  else
		    local_kw += line[j];
		}
		if (!local_kw.empty()){
		  lexer_map[local_kw]=giac_kw;
		  back_lexer_map.insert(pair<string,localized_string>(giac_kw,localized_string(lang,local_kw)));
		}
	      }
	    }
	    free(line);
	  } // if (f)
	  else
	    cerr << "// Unable to find keyword file " << file << endl;
	}
      }
    }

    bool has_special_syntax(const char * s){
      std::pair<charptr_gen *,charptr_gen *> p=
	equal_range(builtin_lexer_functions_begin(),builtin_lexer_functions_end(),
		    std::pair<const char *,gen>(s,0),
		    tri);
      if (p.first!=p.second && p.first!=builtin_lexer_functions_end())
	return (p.first->second.subtype!=T_UNARY_OP-256);
      map_charptr_gen::const_iterator i = lexer_functions().find(s);
      if (i==lexer_functions().end())
	return false;
      return (i->second.subtype!=T_UNARY_OP-256);
    }
    
    bool lexer_functions_register(const unary_function_ptr & u,const char * s,int parser_token){
      map_charptr_gen::const_iterator i = lexer_functions().find(s);
      if (i!=lexer_functions().end())
	return false;
      if (doing_insmod)
	registered_lexer_functions().push_back(user_function(s,parser_token));
      if (!builtin_lexer_functions_sorted){
#ifndef STATIC_BUILTIN_LEXER_FUNCTIONS
	builtin_lexer_functions_begin()[builtin_lexer_functions_number]=std::pair<const char *,gen>(s,gen(u));
	if (parser_token==1)
	  builtin_lexer_functions_begin()[builtin_lexer_functions_number].second.subtype=T_UNARY_OP-256;
	else
	  builtin_lexer_functions_begin()[builtin_lexer_functions_number].second.subtype=parser_token-256;
	builtin_lexer_functions_number++;
#endif
      }
      else {
	lexer_functions()[s] = gen(u);
	if (parser_token==1)
	  lexer_functions()[s].subtype=T_UNARY_OP-256;
	else
	  lexer_functions()[s].subtype=parser_token-256;
      }
      // If s is a library function name (with ::), update the library
      int ss=strlen(s),j=0;
      for (;j<ss-1;++j){
	if (s[j]==':' && s[j+1]==':')
	  break;
      }
      if (j<ss-1){
	string S(s);
	string libname=S.substr(0,j);
	string funcname=S.substr(j+2,ss-j-2);
	std::map<std::string,std::vector<string> >::iterator it=library_functions().find(libname);
	if (it!=library_functions().end())
	  it->second.push_back(funcname);
	else
	  library_functions()[libname]=vector<string>(1,funcname);
      }
      return true;
    }

    bool lexer_function_remove(const vector<user_function> & v){
      vector<user_function>::const_iterator it=v.begin(),itend=v.end();
      map_charptr_gen::const_iterator i,iend;
      bool ok=true;
      for (;it!=itend;++it){
	i = lexer_functions().find(it->s.c_str());
	iend=lexer_functions().end();
	if (i==iend)
	  ok=false;
	else
	  lexer_functions().erase(it->s.c_str());
      }
      return ok;
    }

    int find_or_make_symbol(const string & s,gen & res,void * scanner,bool check38,GIAC_CONTEXT){
      int tmpo=opened_quote(contextptr);
      if (tmpo & 2)
	check38=false;
      if (s.size()==1){
#ifdef GIAC_HAS_STO_38
	if (s[0]>='A' && s[0]<='Z'){
	  index_status(contextptr)=1; 
	  res=*tab_one_letter_idnt[s[0]-'A'];
	  return T_SYMBOL;
	}
	if (check38 && s[0]>='a' && s[0]<='z' && calc_mode(contextptr)==38)
	  giac_yyerror(scanner,invalid_name);
#else
	if (s[0]>='a' && s[0]<='z'){
	  if (check38 && calc_mode(contextptr)==38)
	    giac_yyerror(scanner,invalid_name);
	  index_status(contextptr)=1; 
	  res=*tab_one_letter_idnt[s[0]-'a'];
	  return T_SYMBOL;
	}
#endif
	switch (s[0]){
	case '+':
	  res=at_plus;
	  return T_UNARY_OP;
	case '-':
	  res=at_neg;
	  return T_UNARY_OP;
	case '*':
	  res=at_prod;
	  return T_UNARY_OP;
	case '/':
	  res=at_division;
	  return T_UNARY_OP;
	case '^':
	  res=at_pow;
	  return T_UNARY_OP;
	}
      }
      string ts(s);
      std::map<std::string,std::string>::const_iterator trans=lexer_localization_map().find(ts);
      if (trans!=lexer_localization_map().end())
	ts=trans->second;
      std::map<std::string,std::vector<string> >::const_iterator j=lexer_translator().find(ts);
      if (j!=lexer_translator().end() && !j->second.empty())
	ts=j->second.back();
      std::pair<charptr_gen *,charptr_gen *> p=equal_range(builtin_lexer_functions_begin(),builtin_lexer_functions_end(),std::pair<const char *,gen>(ts.c_str(),0),tri);
      if (p.first!=p.second && p.first!=builtin_lexer_functions_end()){
	if (p.first->second.subtype==T_TO-256)
	  res=plus_one;
	else
	  res = p.first->second;
	res.subtype=1;
	if (builtin_lexer_functions_){
	  res=gen(int(builtin_lexer_functions_[p.first-builtin_lexer_functions_begin()]+p.first->second.val));
	  res=gen(*res._FUNCptr);
	}
	index_status(contextptr)=(p.first->second.subtype==T_UNARY_OP-256);
	int token=p.first->second.subtype;
	token += (token<0)?512:256 ;	
	return token;
      }
      lexer_tab_int_type tst={ts.c_str(),0,0,0,0};
      std::pair<const lexer_tab_int_type *,const lexer_tab_int_type *> pp = equal_range(lexer_tab_int_values,lexer_tab_int_values_end,tst,tri1);
      if (pp.first!=pp.second && pp.first!=lexer_tab_int_values_end){
	index_status(contextptr)=pp.first->status;
	res=int(pp.first->value);
	res.subtype=pp.first->subtype;
	return pp.first->return_value;
      }
      map_charptr_gen::const_iterator i = lexer_functions().find(ts.c_str());
      if (i!=lexer_functions().end()){
	if (i->second.subtype==T_TO-256)
	  res=plus_one;
	else
	  res = i->second;
	res.subtype=1;
	index_status(contextptr)=(i->second.subtype==T_UNARY_OP-256);
	return i->second.subtype+256 ;
      }
      sym_tab::const_iterator i2 = syms().find(s);
      if (i2 == syms().end()) {
	const char * S = s.c_str();
	// std::cerr << "lexer new" << s << endl;
	if (check38 && calc_mode(contextptr)==38 && strcmp(S,string_pi) && strcmp(S,string_euler_gamma) && strcmp(S,string_infinity) && strcmp(S,string_undef) && S[0]!='G'&& (!is_known_name_38 || !is_known_name_38(0,S))){
	  // detect invalid names and implicit multiplication 
	  size_t ss=strlen(S);
	  vecteur args;
	  for (size_t i=0;i<ss;++i){
	    char ch=S[i];
	    if (ch=='C' || (ch>='E' && ch<='H') || ch=='L' || ch=='M' || ch=='R'
		/* || ch=='S' */
		|| ch=='U' || ch=='V' || (ch>='X' && ch<='Z') ){
	      string name;
	      name += ch;
	      char c=0;
	      if (i<ss-1)
		c=s[i+1];
	      if (c>='0' && c<='9'){
		name += c;
		++i;
	      }
	      res = identificateur(name);
	      syms()[name.c_str()] = res;
	      args.push_back(res);
	    }
	    else {
	      string coeff;
	      for (++i;i<ss;++i){
		// up to next alphabetic char
		if (s[i]>32 && isalpha(s[i])){
		  --i;
		  break;
		}
		if (scanner && (s[i]<0 || s[i]>'z')){
		  giac_yyerror(scanner,invalid_name);
		  res=undef;
		  return T_SYMBOL;
		}
		coeff += s[i];
	      }
	      if (coeff.empty())
		res=1;
	      else
		res=atof(coeff.c_str());
	      if (ch=='i')
		res=res*cst_i;
	      else {
		if (ch=='e')
		  res=std::exp(1.0)*res;
		else {
		  // Invalid ident name, report error
		  if ( (ch>'Z' || ch<0) && scanner){
		    giac_yyerror(scanner,invalid_name);
		    res=undef;
		    return T_SYMBOL;
		  }
		  coeff=string(1,ch);
		  gen tmp = identificateur(coeff);
		  // syms()[coeff.c_str()]=tmp;
		  res=res*tmp;
		}
	      }
	      args.push_back(res);
	    }
	  }
	  if (args.size()==1)
	    res=args.front();
	  else 
	    res=_prod(args,contextptr);
	  syms()[s]=res;
	  return T_SYMBOL;
	} // end 38 compatibility mode
	res = identificateur(s);
	syms()[s] = res;
	return T_SYMBOL;
      } // end if ==syms.end()
      res = i2->second;
      return T_SYMBOL;
    }

  // Add to the list of predefined symbols
  void set_lexer_symbols(const vecteur & l,GIAC_CONTEXT){
    if (initialisation_done(contextptr))
      return;
    initialisation_done(contextptr)=true;
    const_iterateur it=l.begin(),itend=l.end();
    for (; it!=itend; ++it) {
      if (it->type!=_IDNT)
	continue;
      sym_tab::const_iterator i = syms().find(it->_IDNTptr->id_name);
      if (i==syms().end())
	syms()[it->_IDNTptr->name()] = *it;
    }
  }
  
    std::string translate_at(const char * ch){
      if (!strcmp(ch,"ΔLIST"))
	return "DELTALIST";
      if (!strcmp(ch,"ΠLIST"))
	return "PILIST";
      if (!strcmp(ch,"ΣLIST"))
	return "SIGMALIST";
      if (!strcmp(ch,"∫"))
	return "HPINT";
      if (!strcmp(ch,"∂"))
	return "HPDIFF";
      if (!strcmp(ch,"Σ"))
	return "HPSUM";
      string res;
      for (;*ch;++ch){
        if (*ch=='%')
          res +="PERCENT";
        else
          res += *ch;
      }
      return res;
    }
    
    // Set the input string
    // export GIAC_DEBUG=-2 to renew static_lexer.h/static_extern.h
    YY_BUFFER_STATE set_lexer_string(const std::string &s_orig,yyscan_t & scanner,GIAC_CONTEXT){
      if (abs_calc_mode(contextptr)==38 && s_orig==string(s_orig.size(),' '))
	giac_yyerror(scanner,"Void string");
#ifndef RTOS_THREADX
      if (!builtin_lexer_functions_sorted){
#ifndef STATIC_BUILTIN_LEXER_FUNCTIONS
	sort(builtin_lexer_functions_begin(),builtin_lexer_functions_end(),tri);
#endif
	builtin_lexer_functions_sorted=true;
	int nfunc=builtin_lexer_functions_number;
	if (debug_infolevel==-2 || debug_infolevel==-4){
	  cerr << "Writing " << nfunc << " in static_lexer.h and static_extern.h "<< endl;
	  /*
	  ofstream static_add_ll("static_add.ll");
	  for (int i=0;i<nfunc;i++){
	    static_add_ll << "\"" << builtin_lexer_functions_begin()[i].first << "\" " ;
	    static_add_ll << "*yylval=gen(at_" << translate_at(builtin_lexer_functions_begin()[i].first) << ",0); index_status(yyextra)=0; ";
	    static_add_ll << "return " << signed(builtin_lexer_functions_begin()[i].second.subtype)+256 << ";" ;
            static_add_ll << endl;
	  }
	  static_add_ll.close();
	  */
	  ofstream static_lexer("static_lexer.h");
	  for (int i=0;i<nfunc;i++){
	    static_lexer << "{\"" << builtin_lexer_functions_begin()[i].first << "\",13," << signed(builtin_lexer_functions_begin()[i].second.subtype) ;
	    if (debug_infolevel==-2)
	      static_lexer << ",0,*((unsigned longlong *) at_" << translate_at(builtin_lexer_functions_begin()[i].first) << ")";
	    else
	      static_lexer << ",0,0"; 
	    if (builtin_lexer_functions_begin()[i].second._FUNCptr->quoted())
	      static_lexer << "| 1";
	    static_lexer << "}" ;
	    if (i!=nfunc-1)
	      static_lexer << ",";
	    static_lexer << endl;
	  }
	  static_lexer.close();
	  if (debug_infolevel==-4){
	    ofstream static_lexer_("static_lexer_.h");
	    for (int i=0;i<nfunc;i++){
	      static_lexer_ << "*((unsigned long *) at_" << translate_at(builtin_lexer_functions_begin()[i].first) << ")";
	      if (i!=nfunc-1)
		static_lexer_ << ",";
	      static_lexer_ << endl;
	    }
	    static_lexer_.close();
	  }
	  ofstream static_extern("static_extern.h");
	  static_extern << "#ifndef STATIC_EXTERN" << endl;
	  static_extern << "#define STATIC_EXTERN" << endl;
	  static_extern << "struct unary_function_ptr;" << endl;
	  for (int i=0;i<nfunc;i++){
	    static_extern << "extern const unary_function_ptr * const  at_" << translate_at(builtin_lexer_functions_begin()[i].first) << ";" << endl;
	  }
	  static_extern << "#endif // STATIC_EXTERN" << endl;
	  static_extern.close();
	}
      }
#endif // RTOS_THREADX
      string s(s_orig),lexer_string;
      bool instring=false;
      // stupid match of bracket then parenthesis
      int l=s.size(),nb=0,np=0;
      int i=0;
      if (lexer_close_parenthesis(contextptr)){
	for (;i<l;++i){
	  if (s[i]==92){
	    i += 2;
	    if (i>=l)
	      break;
	  }
	  if (instring){
	    if (s[i]=='"')
	      instring=false;
	  }
	  else {
	    switch (s[i]){
	    case '"':
	      instring=true;
	      break;
	    case '(':
	      ++np;
	      break;
	    case ')':
	      --np;
	      break;
	    case '[':
	      ++nb;
	      break;
	    case ']':
	      --nb;
	      break;
	    }
	  }
	}
	while (np<0 && i>=0 && s[i-1]==')'){
	  --i;
	  ++np;
	}
	while (nb<0 && i>=0 && s[i-1]==']'){
	  --i;
	  ++nb;
	}
	s=s.substr(0,i);
	if (nb<0)
	  cerr << "Too many ]" << endl;
	if (np<0)
	  cerr << "Too many )" << endl;
	if (nb>0)
	  s=s+string(nb,']');
	if (np>0)
	  s=s+string(np,')');
      }
      index_status(contextptr)=0;
      opened_quote(contextptr)=0;
      in_rpn(contextptr)=0;
      lexer_line_number(contextptr)=1;
      first_error_line(contextptr)=0;
      spread_formula(contextptr)=0;
      l=s.size();
      for (;l;l--){
	if (s[l-1]!=' ')
	  break;
      }
      while (l>=4 && s[l-1]==';' && s[l-2]==':' && s[l-3]==';'){
	if (s[l-4]==':')
	  l -= 2;
	else {
	  s[l-3]=':';
	  s[l-2]=';';
	  l--;
	}
      }
      s=s.substr(0,l);
      /* if (l && ( (s[l-1]==';') || (s[l-1]==':')))
	 l--; */
      string ss;
      for (int i=0;i<l;++i){
	if (i && (unsigned char)s[i]==0xc2 && (unsigned char)s[i+1]!=0xb0)
	  ss += ' ';
	if ( (unsigned char)s[i]==0xe2 && i<l-3 ){
          if ((unsigned char)s[i+1]==0x88){ 
	    // mathop, add blank before and after except following an e/E 
	    if ((unsigned char) s[i+2]==0x91){ // sigma
	      ss += " SIGMA";
	      i +=2;
	      continue;
	    }
	    if ((unsigned char) s[i+2]==0x86){ // delta
	      ss += " DELTA";
	      i +=2;
	      continue;
	    }
	    if ((unsigned char) s[i+2]==0x8f){ // pi
	      ss += " PI";
	      i +=2;
	      continue;
	    }
	    if ( i>1 && (s[i-1]=='e' || s[i-1]=='E')){
	      ss +='-';
	      i +=2;
	      continue;
	    }
	    if (i>2  && (s[i-1]==' ' && (s[i-2]=='e' || s[i-2]=='E')) ){
	      ss[ss.size()-1] = '-';
	      i += 3;
	      continue;
	    }
	    ss += ' ';
	    ss += s[i];
	    ++i;
	    ss += s[i];
	    ++i;
	    ss += s[i];
	    ss += ' ';
	    continue;
	  } // 0xe2 0x88
          if ((unsigned char)s[i+1]==0x96 && (unsigned char)s[i+2]==0xba){ 
	    // sto 
	    ss += s[i];
	    ++i;
	    ss += s[i];
	    ++i;
	    ss += s[i];
	    ss += ' ';
	    continue;
	  } // 0xe2 0x96
	} //end if s[i]=0xe2
	if (s[i]=='.'){
	  if ( i && (i<l-1) && (s[i-1]!=' ') && (s[i+1]=='.') ){
	    ss+= " ..";
	    ++i;
	  }
	  else
	    ss+='.';
	}
	else {
	  if (xcas_mode(contextptr) > 0 && xcas_mode(contextptr) !=3){
	    if (s[i]=='#')
	      ss += "//";
	    else
	      ss += s[i];
	  }
	  else
	    ss+=s[i];
	}
      }
      // ofstream of("log"); of << s << endl << ss << endl; of.close();
      lexer_string = ss+" \n ÿ";
      giac_yylex_init(&scanner);
      giac_yyset_extra(contextptr,scanner);
      YY_BUFFER_STATE state=giac_yy_scan_string(lexer_string.c_str(),scanner);
      return state;
    }

    int delete_lexer_string(YY_BUFFER_STATE & state,yyscan_t & scanner){
      giac_yy_delete_buffer(state,scanner);
      giac_yylex_destroy(scanner);
      return 1;
    }

#ifndef NO_NAMESPACE_GIAC
  } // namespace giac
#endif // ndef NO_NAMESPACE_GIAC
  

